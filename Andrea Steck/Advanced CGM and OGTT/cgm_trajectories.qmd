---
title: "CGM Trajectory Analysis"
author: "Laura Pyle & Tim Vigers"
date: "today"
date-format: long
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
    theme:
      light: flatly
      dark: darkly
editor: source
---

```{r setup}
#| include: false
library(tidyverse)
library(haven)
library(hms)
library(knitr)
library(traj)
home_dir <- switch(Sys.info()["sysname"],
  "Darwin" = "/Users/timvigers/Library/CloudStorage/OneDrive-TheUniversityofColoradoDenver/Vigers/BDC/Andrea Steck/Advanced CGM and OGTT",
  "Linux" = "/home/timvigers/OneDrive/Vigers/BDC/Andrea Steck/Advanced CGM and OGTT"
)
github_dir <- switch(Sys.info()["sysname"],
  "Darwin" = "/Users/timvigers/Documents/GitHub",
  "Linux" = "/home/timvigers/Documents/GitHub"
)
knitr::opts_knit$set(root.dir = home_dir)
```

```{r}
# Set a seed for trajectory analyses
set.seed(1017)
# Import CGM data from Fran
cgm <- read_sas("./Data_Raw/rawcgmdata_clean.sas7bdat")
# Convert from numeric time to datetime, round to nearest 5 minutes
cgm$sensordisplaytime <-
  as.POSIXct(cgm$sensordisplaytime, origin = "1960-01-01")
cgm$sensordisplaytime <- round_date(cgm$sensordisplaytime, "5 minutes")
# Separate date and time columns, format
cgm$Date <- as_date(cgm$sensordisplaytime)
cgm$Time <- as_hms(cgm$sensordisplaytime)
cgm <- cgm %>%
  arrange(ID, sensordisplaytime) %>%
  select(ID, Date, Time, DOVISIT, SensorValue)
# For now, if people have duplicated sensor values, take the mean
cgm <- cgm %>%
  group_by(ID, Date, Time, DOVISIT) %>%
  summarise(SensorValue = mean(SensorValue, na.rm = T), .groups = "drop")
# Import demographic, etc. data
df <- read.csv("./Data_Clean/Longitudinal CGM data for 165 subjects.csv",
  na.strings = c("", ".")
)
# Remove unhelpful rows
df <- df %>% filter(!is.na(ID))
# Determine group
df$Group <- factor(is.na(df$Date.of.T1D.dx),
  levels = c(T, F),
  labels = c("Non-Progressor", "Progressor")
)
# Convert dates
df$DOVISIT <- mdy(df$DOVISIT)
# Calculate final visit date (or T1D progression)
df$final_visit <- df$DOVISIT - round(df$yearsfromT1D * 365.25)
# Select only necessary columns
df <- df %>%
  select(
    ID, DOVISIT, A1C, age.at.clinic, SEX, FDR.status, Race_Ethn2, HLAGRP, Group,
    final_visit
  )
# Put together
cgm <- left_join(cgm, df, by = join_by(ID, DOVISIT))
# Sort
cgm <- cgm %>% arrange(ID, Date, Time)
# Measure labels
m_labels <- list(
  "m1" = "Maximum", "m2" = "Range", "m3" = "Mean value",
  "m4" = "Standard deviation", "m5" = "Intercept of the linear model",
  "m6" = "Slope of the linear model",
  "m7" = "R2: Proportion of variance explained by the linear model",
  "m8" = "Curve length (total variation)",
  "m9" = "Rate of intersection with the mean",
  "m10" = "Proportion of time spent above the mean",
  "m11" = "Minimum of the first derivative",
  "m12" = "Maximum of the first derivative",
  "m13" = "Mean of the first derivative",
  "m14" = "Standard deviation of the first derivative",
  "m15" = "Minimum of the second derivative",
  "m16" = "Maximum of the second derivative",
  "m17" = "Mean of the second derivative",
  "m18" = "Standard deviation of the second derivative",
  "m19" = "Later change/Early change"
)
```

# CGM wear Gantt chart

```{r}
#| fig-width: 12
#| fig-height: 9
cgm %>%
  group_by(ID, DOVISIT) %>%
  slice(1, n()) %>%
  mutate(time_from_final = as.numeric(Date - final_visit)) %>%
  group_by(ID) %>%
  mutate(wear = as.numeric(factor(DOVISIT))) %>%
  select(ID, DOVISIT, time_from_final, wear, Group) %>%
  filter(time_from_final >= -1100) %>%
  ggplot(aes(
    x = time_from_final, y = reorder(ID, desc(as.numeric(Group))),
    group = interaction(ID, wear), colour = Group
  )) +
  geom_line() +
  xlab("Days From T1D or Last Visit") +
  scale_color_manual(values = c("#0c457d", "#e8702a")) +
  theme_bw() +
  theme(
    axis.title.y = element_blank(), axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )
```

# Non-progressors vs. progressors

First, we took each person's CGM tracings and averaged the sensor values at each time of day (in 5 minute increments from 00:00:00 to 23:55:00) across all tracings. This ignores temporal changes in CGM tracings as progressors get closer to developing T1D, and likely washes out some nuances that will be explored later.

```{r}
# Average by time of day
mean_cgm <- cgm %>%
  group_by(ID, Group, Time) %>%
  summarise(Glucose = mean(SensorValue, na.rm = T), .groups = "drop")
# Convert to wide
wide_cgm <- mean_cgm %>%
  pivot_wider(names_from = Time, values_from = Glucose)
# Plot
ggplot(mean_cgm, aes(
  x = Time, y = Glucose,
  group = ID, colour = Group
)) +
  geom_line(alpha = 0.5) +
  theme_bw() +
  scale_color_manual(values = c("#0c457d", "#e8702a"))
```

## 3 clusters

```{r}
#| message: false
step1 <- Step1Measures(subset(wide_cgm, select = -c(ID, Group)))
step2 <- Step2Selection(trajMeasures = step1)
step3 <- Step3Clusters(trajSelection = step2, nclusters = 3)
plot(step3, spline = T, which.plots = 1:2, ask = F)
```

```{r}
wide_cgm$Cluster <- step3$partition$Cluster
kable(addmargins(xtabs(~ Cluster + Group, data = wide_cgm)))
summary(xtabs(~ Cluster + Group, data = wide_cgm))
wide_cgm$Cluster <- NULL
```

## 2 clusters

```{r}
step1 <- Step1Measures(subset(wide_cgm, select = -c(ID, Group)))
step2 <- Step2Selection(trajMeasures = step1)
step3 <- Step3Clusters(trajSelection = step2, nclusters = 2)
plot(step3, spline = T, which.plots = 1:2, ask = F)
```

```{r}
wide_cgm$Cluster <- step3$partition$Cluster
kable(addmargins(xtabs(~ Cluster + Group, data = wide_cgm)))
summary(xtabs(~ Cluster + Group, data = wide_cgm))
wide_cgm$Cluster <- NULL
```
