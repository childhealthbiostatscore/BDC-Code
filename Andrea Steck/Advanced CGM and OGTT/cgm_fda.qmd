---
title: "CGM FDA"
author: "Laura Pyle & Tim Vigers"
date: "today"
date-format: long
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
editor: source
---

```{r setup}
#| include: false
library(tidyverse)
library(gtsummary)
library(gt)
library(patchwork)
library(hms)
library(pracma)
library(refund)
library(boot)
home_dir <- switch(Sys.info()["sysname"],
  "Darwin" = "/Users/tim/Library/CloudStorage/OneDrive-TheUniversityofColoradoDenver/Vigers/BDC/Andrea Steck/Advanced CGM and OGTT",
  "Windows" = "C:/Users/Tim/OneDrive - The University of Colorado Denver/Vigers/BDC/Andrea Steck/Advanced CGM and OGTT",
  "Linux" = "/home/tim/OneDrive/Vigers/BDC/Andrea Steck/Advanced CGM and OGTT"
)
github_dir <- switch(Sys.info()["sysname"],
  "Darwin" = "/Users/tim/Documents/GitHub",
  "Windows" = "C:/Users/Tim/Documents/GitHub",
  "Linux" = "/home/tim/Documents/GitHub"
)
knitr::opts_knit$set(root.dir = home_dir)
```

```{r}
# Set a seed
set.seed(1017)
# Import cleaned CGM data
load(file = "./Data_Clean/analysis_dataset.RData")
# - "True controls" are those who didn't progress for at least a year
# 	- E.g. the -12 month CGMs
# - Compare people to themselves across timepoints as well as case vs. control
# - Split the day into 3 equal time periods and compare those
# 	- 10pm - 6am, 6am - 2pm, 2pm - 10pm
# 	- 11pm - 5am, 5am - 11am, 11am - 5pm, 5pm - 11pm
# Basically, we are removing CGM tracings from people who are currently marked
# as non-progressors who we aren't 100% sure about.
cgm <- cgm %>%
  filter(Group == "Progressor" |
    (Group == "Non-Progressor" & Days <= -365.25)) %>%
  mutate(
    nTime = as.numeric(Time),
    TimePeriod = case_when(
      nTime >= 82800 | nTime < 18000 ~ "11pm - 5am",
      nTime >= 18000 & nTime < 39600 ~ "5am - 11am",
      nTime >= 39600 & nTime < 61200 ~ "11am - 5pm",
      nTime >= 61200 & nTime < 82800 ~ "5pm - 11pm",
      .default = "other"
    ),
    # Shift numeric time so that 11pm is our 0
    nTime = ifelse(nTime >= 82800, nTime - 82800, nTime + 3600)
  )
cgm$TimePeriod <- factor(cgm$TimePeriod,
  levels = c("11pm - 5am", "5am - 11am", "11am - 5pm", "5pm - 11pm")
)
```

# Data cleaning and methods

- "True controls" were defined as the CGM tracings at least one year prior to the last clinic visit for a non-progressor. In other words, we are removing CGM tracings from people who are currently marked as non-progressors who we aren't 100% sure about.
- Differences in AUC were compared using the bootstrap with 500 replicates.

```{r}
cgm %>%
  group_by(ID) %>%
  mutate(
    nClinicVisits = length(unique(DOVISIT)),
    nCGMValues = length(SensorValue)
  ) %>%
  slice_min(row_number()) %>%
  ungroup() %>%
  select(
    nClinicVisits, nCGMValues, `FDR status`, HLAGRP, SEX, Race_Ethn2,
    Group
  ) %>%
  tbl_summary(Group) %>%
  add_overall() %>%
  add_p()
```

# Simple GAM smooths

## All day

```{r}
cgm %>%
  ggplot(aes(x = as.POSIXct(Time), y = SensorValue, colour = Group)) +
  geom_smooth() +
  theme_classic() +
  ylab("Sensor Glucose (mg/dL)") +
  xlab("Time of Day") +
  scale_x_datetime(
    date_minor_breaks = "1 hour", date_breaks = "2 hours",
    date_labels = "%H:%M"
  ) +
  scale_color_manual(values = c("#66C2A5", "#FC8D62"))
```

## By time of day

```{r}
# Facet wrap has a hard time with the 11pm - 5am time period, so make plots
# manually
p1 <- cgm %>%
  filter(TimePeriod == "11pm - 5am") %>%
  ggplot(aes(x = nTime, y = SensorValue, colour = Group)) +
  geom_smooth() +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5)) +
  ylab("Sensor Glucose (mg/dL)") +
  xlab("Time of Day") +
  ggtitle("11pm - 5am") +
  scale_x_continuous(
    breaks = seq(0, 21600, by = 3600),
    labels = c("23:00", "00:00", "01:00", "02:00", "03:00", "04:00", "05:00")
  ) +
  scale_color_manual(values = c("#66C2A5", "#FC8D62"))
p2 <- cgm %>%
  filter(TimePeriod == "5am - 11am") %>%
  ggplot(aes(x = as.POSIXct(Time), y = SensorValue, colour = Group)) +
  geom_smooth() +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5)) +
  ylab("Sensor Glucose (mg/dL)") +
  xlab("Time of Day") +
  ggtitle("5am - 11am") +
  scale_x_datetime(date_breaks = "1 hour", date_labels = "%H:%M") +
  scale_color_manual(values = c("#66C2A5", "#FC8D62"))
p3 <- cgm %>%
  filter(TimePeriod == "11am - 5pm") %>%
  ggplot(aes(x = as.POSIXct(Time), y = SensorValue, colour = Group)) +
  geom_smooth() +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5)) +
  ylab("Sensor Glucose (mg/dL)") +
  xlab("Time of Day") +
  ggtitle("11am - 5pm") +
  scale_x_datetime(date_breaks = "1 hour", date_labels = "%H:%M") +
  scale_color_manual(values = c("#66C2A5", "#FC8D62"))
p4 <- cgm %>%
  filter(TimePeriod == "5pm - 11pm") %>%
  ggplot(aes(x = as.POSIXct(Time), y = SensorValue, colour = Group)) +
  geom_smooth() +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5)) +
  ylab("Sensor Glucose (mg/dL)") +
  xlab("Time of Day") +
  ggtitle("5pm - 11pm") +
  scale_x_datetime(date_breaks = "1 hour", date_labels = "%H:%M") +
  scale_color_manual(values = c("#66C2A5", "#FC8D62"))
(p1 + p2) / (p3 + p4) + plot_layout(guides = "collect")
```

# Functional PCA

## All CGM tracings

- For each participant, we calculated the average sensor value at each time of day during the various periods of the day.

```{r}
#| include: false
ps <- lapply(split.data.frame(cgm, cgm$TimePeriod), function(d) {
  # Time period
  tp <- as.character(d$TimePeriod[1])
  print(tp)
  # Format data for analysis (why are these FDA packages so irritating)
  d <- d %>%
    group_by(ID, Group, nTime) %>%
    summarise(SensorValue = mean(SensorValue, na.rm = T), .groups = "drop") %>%
    arrange(nTime) %>%
    pivot_wider(
      id_cols = c(ID, Group), names_from = nTime,
      values_from = SensorValue
    )
  glucose <- d %>%
    select(-ID, -Group) %>%
    as.matrix()
  d <- d %>%
    select(ID, Group) %>%
    as.data.frame()
  d$Glucose <- glucose
  d <- d[complete.cases(d), ]
  # FoSR
  fit_fosr <- bayes_fosr(Glucose ~ Group, data = d)
  # Plot
  pred <- data.frame(predict(fit_fosr))
  colnames(pred) <- colnames(glucose)
  pred$Group <- d$Group
  pred <- pred %>%
    distinct() %>%
    pivot_longer(-Group,
      names_to = "Time",
      values_to = "Glucose"
    )
  pred$Time <- as.numeric(pred$Time)
  p <- ggplot(pred, aes(x = Time, y = Glucose, group = Group, colour = Group)) +
    geom_line() +
    ggtitle(tp) +
    theme_classic() +
    ylim(c(90, 190)) +
    ylab("Sensor Glucose (mg/dL)") +
    xlab("Time of Day") +
    scale_color_manual(values = c("#66C2A5", "#FC8D62")) +
    theme(
      plot.title = element_text(hjust = 0.5),
      axis.text.x = element_text(angle = 45, vjust = 0.5)
    )
  if (tp == "11pm - 5am") {
    p <- p + scale_x_continuous(
      breaks = seq(0, 21600, by = 3600),
      labels = c("23:00", "00:00", "01:00", "02:00", "03:00", "04:00", "05:00")
    )
  } else if (tp == "5am - 11am") {
    p <- p + scale_x_continuous(
      breaks = seq(21600, 21600 + 21600, by = 3600),
      labels = c("05:00", "06:00", "07:00", "08:00", "09:00", "10:00", "11:00")
    )
  } else if (tp == "11am - 5pm") {
    p <- p + scale_x_continuous(
      breaks = seq(43200, 43200 + 21600, by = 3600),
      labels = c("11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00")
    )
  } else if (tp == "5pm - 11pm") {
    p <- p + scale_x_continuous(
      breaks = seq(64800, 64800 + 21600, by = 3600),
      labels = c("17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00")
    )
  }
  # AUC
  auc_prog <- trapz(
    pred$Time[pred$Group == "Progressor"] / 60,
    pred$Glucose[pred$Group == "Progressor"]
  )
  auc_non_prog <- trapz(
    pred$Time[pred$Group == "Non-Progressor"] / 60,
    pred$Glucose[pred$Group == "Non-Progressor"]
  )
  auc_diff <- auc_prog - auc_non_prog
  # Create a function for bootstrapping
  auc_diff_func <- function(d, indices) {
    fit_fosr <- bayes_fosr(Glucose ~ Group, d[indices, ])
    pred <- data.frame(predict(fit_fosr))
    colnames(pred) <- colnames(glucose)
    pred$Group <- d$Group
    pred <- pred %>%
      distinct() %>%
      pivot_longer(-Group,
        names_to = "Time",
        values_to = "Glucose"
      )
    auc_prog <- trapz(
      as.numeric(pred$Time[pred$Group == "Progressor"]) / 60,
      pred$Glucose[pred$Group == "Progressor"]
    )
    auc_non_prog <- trapz(
      as.numeric(pred$Time[pred$Group == "Non-Progressor"]) / 60,
      pred$Glucose[pred$Group == "Non-Progressor"]
    )
    auc_diff <- auc_prog - auc_non_prog
    return(auc_diff)
  }
  # Toot it and boot it
  reps <- boot(data = d, statistic = auc_diff_func, R = 500, strata = d$Group)
  ci <- boot.ci(reps, type = "bca")
  # Add to plot
  p <- p +
    annotate("text",
      x = min(pred$Time) + (diff(range(pred$Time)) / 2), y = 190,
      label = paste0("AUC Difference: ", round(auc_diff))
    ) +
    annotate("text",
      x = min(pred$Time) + (diff(range(pred$Time)) / 2), y = 180,
      label = paste0("(95% CI: ", round(ci$bca[4]), ", ", round(ci$bca[5]), ")")
    ) +
    geom_hline(yintercept = 140, linetype = "dashed")
  return(p)
})
```

```{r}
invisible(lapply(ps, function(p) {
  print(p)
}))
```

```{r}
#| message: false
p_collected <- (ps[[1]] + ps[[2]]) / (ps[[3]] + ps[[4]]) +
  plot_layout(guides = "collect", axis_titles = "collect") +
  plot_annotation(
    title = "Function on Scalar Regression of CGM Data",
    theme = theme(plot.title = element_text(hjust = 0.5))
  )
p_collected
ggsave(
  filename = "./Dissemination/ada_fig1.png", plot = p_collected, device = "png",
  units = "in", width = 9, height = 6
)
```

## 6-9 Months Prior to Progression

- CGM data was limited to the CGM tracings at least 12 months away from last visit for non-progressors, and CGM tracings 6-9 months (180 to 270 days) prior to development of T1D for progressors.
- For each participant, we calculated the average sensor value at each time of day during the various periods of the day.

```{r}
cgm_filtered <- cgm %>%
  filter(Group == "Non-Progressor" |
    (Group == "Progressor" & Days >= -270 & Days <= -180))
cgm_filtered %>%
  group_by(ID) %>%
  mutate(
    nClinicVisits = length(unique(DOVISIT)),
    nCGMValues = length(SensorValue)
  ) %>%
  slice_min(row_number()) %>%
  ungroup() %>%
  select(
    nClinicVisits, nCGMValues, `FDR status`, HLAGRP, SEX, Race_Ethn2,
    Group
  ) %>%
  tbl_summary(Group) %>%
  add_overall() %>%
  add_p()
```

```{r}
#| include: false
ps <-
  lapply(split.data.frame(cgm_filtered, cgm_filtered$TimePeriod), function(d) {
    # Time period
    tp <- as.character(d$TimePeriod[1])
    # Format data for analysis (why are these FDA packages so irritating)
    d <- d %>%
      group_by(ID, Group, nTime) %>%
      summarise(SensorValue = mean(SensorValue, na.rm = T), .groups = "drop") %>%
      arrange(nTime) %>%
      pivot_wider(
        id_cols = c(ID, Group), names_from = nTime,
        values_from = SensorValue
      )
    glucose <- d %>%
      select(-ID, -Group) %>%
      as.matrix()
    d <- d %>%
      select(ID, Group) %>%
      as.data.frame()
    d$Glucose <- glucose
    d <- d[complete.cases(d), ]
    # FoSR
    fit_fosr <- bayes_fosr(Glucose ~ Group, data = d)
    # Plot
    pred <- data.frame(predict(fit_fosr))
    colnames(pred) <- colnames(glucose)
    pred$Group <- d$Group
    pred <- pred %>%
      distinct() %>%
      pivot_longer(-Group,
        names_to = "Time",
        values_to = "Glucose"
      )
    pred$Time <- as.numeric(pred$Time)
    p <- ggplot(pred, aes(x = Time, y = Glucose, group = Group, colour = Group)) +
      geom_line() +
      ggtitle(tp) +
      theme_classic() +
      ylim(c(90, 190)) +
      ylab("Sensor Glucose (mg/dL)") +
      xlab("Time of Day") +
      scale_color_manual(values = c("#66C2A5", "#FC8D62")) +
      theme(
        plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 45, vjust = 0.5)
      )
    if (tp == "11pm - 5am") {
      p <- p + scale_x_continuous(
        breaks = seq(0, 21600, by = 3600),
        labels = c("23:00", "00:00", "01:00", "02:00", "03:00", "04:00", "05:00")
      )
    } else if (tp == "5am - 11am") {
      p <- p + scale_x_continuous(
        breaks = seq(21600, 21600 + 21600, by = 3600),
        labels = c("05:00", "06:00", "07:00", "08:00", "09:00", "10:00", "11:00")
      )
    } else if (tp == "11am - 5pm") {
      p <- p + scale_x_continuous(
        breaks = seq(43200, 43200 + 21600, by = 3600),
        labels = c("11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00")
      )
    } else if (tp == "5pm - 11pm") {
      p <- p + scale_x_continuous(
        breaks = seq(64800, 64800 + 21600, by = 3600),
        labels = c("17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00")
      )
    }
    # AUC
    auc_prog <- trapz(
      pred$Time[pred$Group == "Progressor"] / 60,
      pred$Glucose[pred$Group == "Progressor"]
    )
    auc_non_prog <- trapz(
      pred$Time[pred$Group == "Non-Progressor"] / 60,
      pred$Glucose[pred$Group == "Non-Progressor"]
    )
    auc_diff <- auc_prog - auc_non_prog
    # Create a function for bootstrapping
    auc_diff_func <- function(d, indices) {
      fit_fosr <- bayes_fosr(Glucose ~ Group, d[indices, ])
      pred <- data.frame(predict(fit_fosr))
      colnames(pred) <- colnames(glucose)
      pred$Group <- d$Group
      pred <- pred %>%
        distinct() %>%
        pivot_longer(-Group,
          names_to = "Time",
          values_to = "Glucose"
        )
      auc_prog <- trapz(
        as.numeric(pred$Time[pred$Group == "Progressor"]) / 60,
        pred$Glucose[pred$Group == "Progressor"]
      )
      auc_non_prog <- trapz(
        as.numeric(pred$Time[pred$Group == "Non-Progressor"]) / 60,
        pred$Glucose[pred$Group == "Non-Progressor"]
      )
      auc_diff <- auc_prog - auc_non_prog
      return(auc_diff)
    }
    # Toot it and boot it
    reps <- boot(data = d, statistic = auc_diff_func, R = 500, strata = d$Group)
    ci <- boot.ci(reps, type = "bca")
    # Add to plot
    p <- p +
      annotate("text",
        x = min(pred$Time) + (diff(range(pred$Time)) / 2), y = 190,
        label = paste0("AUC Difference: ", round(auc_diff))
      ) +
      annotate("text",
        x = min(pred$Time) + (diff(range(pred$Time)) / 2), y = 180,
        label = paste0("(95% CI: ", round(ci$bca[4]), ", ", round(ci$bca[5]), ")")
      ) +
      geom_hline(yintercept = 140, linetype = "dashed")
    return(p)
  })
```

```{r}
invisible(lapply(ps, function(p) {
  print(p)
}))
```

```{r}
#| message: false
p_collected <- (ps[[1]] + ps[[2]]) / (ps[[3]] + ps[[4]]) +
  plot_layout(guides = "collect", axis_titles = "collect") +
  plot_annotation(
    title = "Function on Scalar Regression of CGM Data",
    theme = theme(plot.title = element_text(hjust = 0.5))
  )
p_collected
ggsave(
  filename = "./Dissemination/ada_fig1.png", plot = p_collected, device = "png",
  units = "in", width = 9, height = 6
)
```

## 3-6 Months Prior to Progression

- CGM data was limited to the CGM tracings at least 12 months away from last visit for non-progressors, and CGM tracings 3-6 months (90 to 180 days) prior to development of T1D for progressors.
- For each participant, we calculated the average sensor value at each time of day during the various periods of the day.

```{r}
cgm_filtered <- cgm %>%
  filter(Group == "Non-Progressor" |
    (Group == "Progressor" & Days >= -180 & Days <= -90))
cgm_filtered %>%
  group_by(ID) %>%
  mutate(
    nClinicVisits = length(unique(DOVISIT)),
    nCGMValues = length(SensorValue)
  ) %>%
  slice_min(row_number()) %>%
  ungroup() %>%
  select(
    nClinicVisits, nCGMValues, `FDR status`, HLAGRP, SEX, Race_Ethn2,
    Group
  ) %>%
  tbl_summary(Group) %>%
  add_overall() %>%
  add_p()
```

```{r}
#| include: false
ps <-
  lapply(split.data.frame(cgm_filtered, cgm_filtered$TimePeriod), function(d) {
    # Time period
    tp <- as.character(d$TimePeriod[1])
    # Format data for analysis (why are these FDA packages so irritating)
    d <- d %>%
      group_by(ID, Group, nTime) %>%
      summarise(SensorValue = mean(SensorValue, na.rm = T), .groups = "drop") %>%
      arrange(nTime) %>%
      pivot_wider(
        id_cols = c(ID, Group), names_from = nTime,
        values_from = SensorValue
      )
    glucose <- d %>%
      select(-ID, -Group) %>%
      as.matrix()
    d <- d %>%
      select(ID, Group) %>%
      as.data.frame()
    d$Glucose <- glucose
    d <- d[complete.cases(d), ]
    # FoSR
    fit_fosr <- bayes_fosr(Glucose ~ Group, data = d)
    # Plot
    pred <- data.frame(predict(fit_fosr))
    colnames(pred) <- colnames(glucose)
    pred$Group <- d$Group
    pred <- pred %>%
      distinct() %>%
      pivot_longer(-Group,
        names_to = "Time",
        values_to = "Glucose"
      )
    pred$Time <- as.numeric(pred$Time)
    p <- ggplot(pred, aes(x = Time, y = Glucose, group = Group, colour = Group)) +
      geom_line() +
      ggtitle(tp) +
      theme_classic() +
      ylim(c(90, 190)) +
      ylab("Sensor Glucose (mg/dL)") +
      xlab("Time of Day") +
      scale_color_manual(values = c("#66C2A5", "#FC8D62")) +
      theme(
        plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 45, vjust = 0.5)
      )
    if (tp == "11pm - 5am") {
      p <- p + scale_x_continuous(
        breaks = seq(0, 21600, by = 3600),
        labels = c("23:00", "00:00", "01:00", "02:00", "03:00", "04:00", "05:00")
      )
    } else if (tp == "5am - 11am") {
      p <- p + scale_x_continuous(
        breaks = seq(21600, 21600 + 21600, by = 3600),
        labels = c("05:00", "06:00", "07:00", "08:00", "09:00", "10:00", "11:00")
      )
    } else if (tp == "11am - 5pm") {
      p <- p + scale_x_continuous(
        breaks = seq(43200, 43200 + 21600, by = 3600),
        labels = c("11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00")
      )
    } else if (tp == "5pm - 11pm") {
      p <- p + scale_x_continuous(
        breaks = seq(64800, 64800 + 21600, by = 3600),
        labels = c("17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00")
      )
    }
    # AUC
    auc_prog <- trapz(
      pred$Time[pred$Group == "Progressor"] / 60,
      pred$Glucose[pred$Group == "Progressor"]
    )
    auc_non_prog <- trapz(
      pred$Time[pred$Group == "Non-Progressor"] / 60,
      pred$Glucose[pred$Group == "Non-Progressor"]
    )
    auc_diff <- auc_prog - auc_non_prog
    # Create a function for bootstrapping
    auc_diff_func <- function(d, indices) {
      fit_fosr <- bayes_fosr(Glucose ~ Group, d[indices, ])
      pred <- data.frame(predict(fit_fosr))
      colnames(pred) <- colnames(glucose)
      pred$Group <- d$Group
      pred <- pred %>%
        distinct() %>%
        pivot_longer(-Group,
          names_to = "Time",
          values_to = "Glucose"
        )
      auc_prog <- trapz(
        as.numeric(pred$Time[pred$Group == "Progressor"]) / 60,
        pred$Glucose[pred$Group == "Progressor"]
      )
      auc_non_prog <- trapz(
        as.numeric(pred$Time[pred$Group == "Non-Progressor"]) / 60,
        pred$Glucose[pred$Group == "Non-Progressor"]
      )
      auc_diff <- auc_prog - auc_non_prog
      return(auc_diff)
    }
    # Toot it and boot it
    reps <- boot(data = d, statistic = auc_diff_func, R = 500, strata = d$Group)
    ci <- boot.ci(reps, type = "bca")
    # Add to plot
    p <- p +
      annotate("text",
        x = min(pred$Time) + (diff(range(pred$Time)) / 2), y = 190,
        label = paste0("AUC Difference: ", round(auc_diff))
      ) +
      annotate("text",
        x = min(pred$Time) + (diff(range(pred$Time)) / 2), y = 180,
        label = paste0("(95% CI: ", round(ci$bca[4]), ", ", round(ci$bca[5]), ")")
      ) +
      geom_hline(yintercept = 140, linetype = "dashed")
    return(p)
  })
```

```{r}
invisible(lapply(ps, function(p) {
  print(p)
}))
```

```{r}
#| message: false
p_collected <- (ps[[1]] + ps[[2]]) / (ps[[3]] + ps[[4]]) +
  plot_layout(guides = "collect", axis_titles = "collect") +
  plot_annotation(
    title = "Function on Scalar Regression of CGM Data",
    theme = theme(plot.title = element_text(hjust = 0.5))
  )
p_collected
ggsave(
  filename = "./Dissemination/ada_fig1.png", plot = p_collected, device = "png",
  units = "in", width = 9, height = 6
)
```

## 3 Months Prior to Progression

- CGM data was limited to the CGM tracings at least 12 months away from last visit for non-progressors, and CGM tracings 3 months (90 days) prior to and at the time of development of T1D for progressors.
- For each participant, we calculated the average sensor value at each time of day during the various periods of the day.

```{r}
cgm_filtered <- cgm %>%
  filter(Group == "Non-Progressor" |
    (Group == "Progressor" & Days >= -90 & Days <= 0))
cgm_filtered %>%
  group_by(ID) %>%
  mutate(
    nClinicVisits = length(unique(DOVISIT)),
    nCGMValues = length(SensorValue)
  ) %>%
  slice_min(row_number()) %>%
  ungroup() %>%
  select(
    nClinicVisits, nCGMValues, `FDR status`, HLAGRP, SEX, Race_Ethn2,
    Group
  ) %>%
  tbl_summary(Group) %>%
  add_overall() %>%
  add_p()
```

```{r}
#| include: false
ps <-
  lapply(split.data.frame(cgm_filtered, cgm_filtered$TimePeriod), function(d) {
    # Time period
    tp <- as.character(d$TimePeriod[1])
    # Format data for analysis (why are these FDA packages so irritating)
    d <- d %>%
      group_by(ID, Group, nTime) %>%
      summarise(SensorValue = mean(SensorValue, na.rm = T), .groups = "drop") %>%
      arrange(nTime) %>%
      pivot_wider(
        id_cols = c(ID, Group), names_from = nTime,
        values_from = SensorValue
      )
    glucose <- d %>%
      select(-ID, -Group) %>%
      as.matrix()
    d <- d %>%
      select(ID, Group) %>%
      as.data.frame()
    d$Glucose <- glucose
    d <- d[complete.cases(d), ]
    # FoSR
    fit_fosr <- bayes_fosr(Glucose ~ Group, data = d)
    # Plot
    pred <- data.frame(predict(fit_fosr))
    colnames(pred) <- colnames(glucose)
    pred$Group <- d$Group
    pred <- pred %>%
      distinct() %>%
      pivot_longer(-Group,
        names_to = "Time",
        values_to = "Glucose"
      )
    pred$Time <- as.numeric(pred$Time)
    p <- ggplot(pred, aes(x = Time, y = Glucose, group = Group, colour = Group)) +
      geom_line() +
      ggtitle(tp) +
      theme_classic() +
      ylim(c(90, 190)) +
      ylab("Sensor Glucose (mg/dL)") +
      xlab("Time of Day") +
      scale_color_manual(values = c("#66C2A5", "#FC8D62")) +
      theme(
        plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 45, vjust = 0.5)
      )
    if (tp == "11pm - 5am") {
      p <- p + scale_x_continuous(
        breaks = seq(0, 21600, by = 3600),
        labels = c("23:00", "00:00", "01:00", "02:00", "03:00", "04:00", "05:00")
      )
    } else if (tp == "5am - 11am") {
      p <- p + scale_x_continuous(
        breaks = seq(21600, 21600 + 21600, by = 3600),
        labels = c("05:00", "06:00", "07:00", "08:00", "09:00", "10:00", "11:00")
      )
    } else if (tp == "11am - 5pm") {
      p <- p + scale_x_continuous(
        breaks = seq(43200, 43200 + 21600, by = 3600),
        labels = c("11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00")
      )
    } else if (tp == "5pm - 11pm") {
      p <- p + scale_x_continuous(
        breaks = seq(64800, 64800 + 21600, by = 3600),
        labels = c("17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00")
      )
    }
    # AUC
    auc_prog <- trapz(
      pred$Time[pred$Group == "Progressor"] / 60,
      pred$Glucose[pred$Group == "Progressor"]
    )
    auc_non_prog <- trapz(
      pred$Time[pred$Group == "Non-Progressor"] / 60,
      pred$Glucose[pred$Group == "Non-Progressor"]
    )
    auc_diff <- auc_prog - auc_non_prog
    # Create a function for bootstrapping
    auc_diff_func <- function(d, indices) {
      fit_fosr <- bayes_fosr(Glucose ~ Group, d[indices, ])
      pred <- data.frame(predict(fit_fosr))
      colnames(pred) <- colnames(glucose)
      pred$Group <- d$Group
      pred <- pred %>%
        distinct() %>%
        pivot_longer(-Group,
          names_to = "Time",
          values_to = "Glucose"
        )
      auc_prog <- trapz(
        as.numeric(pred$Time[pred$Group == "Progressor"]) / 60,
        pred$Glucose[pred$Group == "Progressor"]
      )
      auc_non_prog <- trapz(
        as.numeric(pred$Time[pred$Group == "Non-Progressor"]) / 60,
        pred$Glucose[pred$Group == "Non-Progressor"]
      )
      auc_diff <- auc_prog - auc_non_prog
      return(auc_diff)
    }
    # Toot it and boot it
    reps <- boot(data = d, statistic = auc_diff_func, R = 500, strata = d$Group)
    ci <- boot.ci(reps, type = "bca")
    # Add to plot
    p <- p +
      annotate("text",
        x = min(pred$Time) + (diff(range(pred$Time)) / 2), y = 190,
        label = paste0("AUC Difference: ", round(auc_diff))
      ) +
      annotate("text",
        x = min(pred$Time) + (diff(range(pred$Time)) / 2), y = 180,
        label = paste0("(95% CI: ", round(ci$bca[4]), ", ", round(ci$bca[5]), ")")
      ) +
      geom_hline(yintercept = 140, linetype = "dashed")
    return(p)
  })
```

```{r}
invisible(lapply(ps, function(p) {
  print(p)
}))
```

```{r}
#| message: false
p_collected <- (ps[[1]] + ps[[2]]) / (ps[[3]] + ps[[4]]) +
  plot_layout(guides = "collect", axis_titles = "collect") +
  plot_annotation(
    title = "Function on Scalar Regression of CGM Data",
    theme = theme(plot.title = element_text(hjust = 0.5))
  )
p_collected
ggsave(
  filename = "./Dissemination/ada_fig1.png", plot = p_collected, device = "png",
  units = "in", width = 9, height = 6
)
```

## Post-Progression

- CGM data was limited to the CGM tracings at least 12 months away from last visit for non-progressors, and CGM tracings 3 months (90 days) after and at the time of development of T1D for progressors.
- For each participant, we calculated the average sensor value at each time of day during the various periods of the day.

```{r}
cgm_filtered <- cgm %>%
  filter(Group == "Non-Progressor" |
    (Group == "Progressor" & Days >= 0 & Days <= 90))
cgm_filtered %>%
  group_by(ID) %>%
  mutate(
    nClinicVisits = length(unique(DOVISIT)),
    nCGMValues = length(SensorValue)
  ) %>%
  slice_min(row_number()) %>%
  ungroup() %>%
  select(
    nClinicVisits, nCGMValues, `FDR status`, HLAGRP, SEX, Race_Ethn2,
    Group
  ) %>%
  tbl_summary(Group) %>%
  add_overall() %>%
  add_p()
```

```{r}
#| include: false
ps <-
  lapply(split.data.frame(cgm_filtered, cgm_filtered$TimePeriod), function(d) {
    # Time period
    tp <- as.character(d$TimePeriod[1])
    # Format data for analysis (why are these FDA packages so irritating)
    d <- d %>%
      group_by(ID, Group, nTime) %>%
      summarise(SensorValue = mean(SensorValue, na.rm = T), .groups = "drop") %>%
      arrange(nTime) %>%
      pivot_wider(
        id_cols = c(ID, Group), names_from = nTime,
        values_from = SensorValue
      )
    glucose <- d %>%
      select(-ID, -Group) %>%
      as.matrix()
    d <- d %>%
      select(ID, Group) %>%
      as.data.frame()
    d$Glucose <- glucose
    d <- d[complete.cases(d), ]
    # FoSR
    fit_fosr <- bayes_fosr(Glucose ~ Group, data = d)
    # Plot
    pred <- data.frame(predict(fit_fosr))
    colnames(pred) <- colnames(glucose)
    pred$Group <- d$Group
    pred <- pred %>%
      distinct() %>%
      pivot_longer(-Group,
        names_to = "Time",
        values_to = "Glucose"
      )
    pred$Time <- as.numeric(pred$Time)
    p <- ggplot(pred, aes(x = Time, y = Glucose, group = Group, colour = Group)) +
      geom_line() +
      ggtitle(tp) +
      theme_classic() +
      ylim(c(90, 190)) +
      ylab("Sensor Glucose (mg/dL)") +
      xlab("Time of Day") +
      scale_color_manual(values = c("#66C2A5", "#FC8D62")) +
      theme(
        plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 45, vjust = 0.5)
      )
    if (tp == "11pm - 5am") {
      p <- p + scale_x_continuous(
        breaks = seq(0, 21600, by = 3600),
        labels = c("23:00", "00:00", "01:00", "02:00", "03:00", "04:00", "05:00")
      )
    } else if (tp == "5am - 11am") {
      p <- p + scale_x_continuous(
        breaks = seq(21600, 21600 + 21600, by = 3600),
        labels = c("05:00", "06:00", "07:00", "08:00", "09:00", "10:00", "11:00")
      )
    } else if (tp == "11am - 5pm") {
      p <- p + scale_x_continuous(
        breaks = seq(43200, 43200 + 21600, by = 3600),
        labels = c("11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00")
      )
    } else if (tp == "5pm - 11pm") {
      p <- p + scale_x_continuous(
        breaks = seq(64800, 64800 + 21600, by = 3600),
        labels = c("17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00")
      )
    }
    # AUC
    auc_prog <- trapz(
      pred$Time[pred$Group == "Progressor"] / 60,
      pred$Glucose[pred$Group == "Progressor"]
    )
    auc_non_prog <- trapz(
      pred$Time[pred$Group == "Non-Progressor"] / 60,
      pred$Glucose[pred$Group == "Non-Progressor"]
    )
    auc_diff <- auc_prog - auc_non_prog
    # Create a function for bootstrapping
    auc_diff_func <- function(d, indices) {
      fit_fosr <- bayes_fosr(Glucose ~ Group, d[indices, ])
      pred <- data.frame(predict(fit_fosr))
      colnames(pred) <- colnames(glucose)
      pred$Group <- d$Group
      pred <- pred %>%
        distinct() %>%
        pivot_longer(-Group,
          names_to = "Time",
          values_to = "Glucose"
        )
      auc_prog <- trapz(
        as.numeric(pred$Time[pred$Group == "Progressor"]) / 60,
        pred$Glucose[pred$Group == "Progressor"]
      )
      auc_non_prog <- trapz(
        as.numeric(pred$Time[pred$Group == "Non-Progressor"]) / 60,
        pred$Glucose[pred$Group == "Non-Progressor"]
      )
      auc_diff <- auc_prog - auc_non_prog
      return(auc_diff)
    }
    # Toot it and boot it
    reps <- boot(data = d, statistic = auc_diff_func, R = 500, strata = d$Group)
    ci <- boot.ci(reps, type = "bca")
    # Add to plot
    p <- p +
      annotate("text",
        x = min(pred$Time) + (diff(range(pred$Time)) / 2), y = 190,
        label = paste0("AUC Difference: ", round(auc_diff))
      ) +
      annotate("text",
        x = min(pred$Time) + (diff(range(pred$Time)) / 2), y = 180,
        label = paste0("(95% CI: ", round(ci$bca[4]), ", ", round(ci$bca[5]), ")")
      ) +
      geom_hline(yintercept = 140, linetype = "dashed")
    return(p)
  })
```

```{r}
invisible(lapply(ps, function(p) {
  print(p)
}))
```

```{r}
#| message: false
p_collected <- (ps[[1]] + ps[[2]]) / (ps[[3]] + ps[[4]]) +
  plot_layout(guides = "collect", axis_titles = "collect") +
  plot_annotation(
    title = "Function on Scalar Regression of CGM Data",
    theme = theme(plot.title = element_text(hjust = 0.5))
  )
p_collected
ggsave(
  filename = "./Dissemination/ada_fig1.png", plot = p_collected, device = "png",
  units = "in", width = 9, height = 6
)
```
