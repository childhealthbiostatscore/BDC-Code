---
title: "CGM FDA"
author: "Laura Pyle & Tim Vigers"
date: "today"
date-format: long
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
editor: source
---

```{r setup}
#| include: false
library(tidyverse)
library(patchwork)
library(gtsummary)
library(refund)
library(face)
library(pracma)
library(boot)
home_dir <- switch(Sys.info()["sysname"],
    "Darwin" = "/Users/tim/Library/CloudStorage/OneDrive-TheUniversityofColoradoDenver/Vigers/BDC/Andrea Steck/Advanced CGM and OGTT",
    "Windows" = "C:/Users/Tim/OneDrive - The University of Colorado Denver/Vigers/BDC/Andrea Steck/Advanced CGM and OGTT",
    "Linux" = "/home/tim/OneDrive/Vigers/BDC/Andrea Steck/Advanced CGM and OGTT"
)
github_dir <- switch(Sys.info()["sysname"],
    "Darwin" = "/Users/tim/Documents/GitHub",
    "Windows" = "C:/Users/Tim/Documents/GitHub",
    "Linux" = "/home/tim/Documents/GitHub"
)
knitr::opts_knit$set(root.dir = home_dir)
```

```{r}
# Import dataset created by /BDC-Code/Andrea Steck/Advanced CGM and OGTT/create_analysis_dataset.R
load(file = "./Data_Clean/analysis_dataset.RData")
```

```{r}
# We want to use sparse/irregular FPCA for these data. For now, we'll set the
# domain as time to last visit
sparse_cgm <- cgm %>%
    select(ID, TimeFromEndpoint, SensorValue) %>%
    rename(argvals = TimeFromEndpoint, subj = ID, y = SensorValue) %>%
    drop_na()
# face_fit <- face.sparse(sparse_cgm)
```


```{r}
# Set a seed
set.seed(1017)
# - "True controls" are those who didn't progress for at least a year
# 	- E.g. the -12 month CGMs
# - Compare people to themselves across timepoints as well as case vs. control
# - Split the day into 3 equal time periods and compare those
# 	- 10pm - 6am, 6am - 2pm, 2pm - 10pm
# 	- 11pm - 5am, 5am - 11am, 11am - 5pm, 5pm - 11pm
# Basically, we are removing CGM tracings from people who are currently marked
# as non-progressors who we aren't 100% sure about.
cgm <- cgm %>%
    filter(
        Group == "Progressor" |
            (Group == "Non-Progressor" & DaysFromEndpoint <= -365.25)
    ) %>%
    mutate(
        nTime = as.numeric(Time),
        TimePeriod = case_when(
            nTime >= 82800 | nTime < 18000 ~ "11pm - 5am",
            nTime >= 18000 & nTime < 39600 ~ "5am - 11am",
            nTime >= 39600 & nTime < 61200 ~ "11am - 5pm",
            nTime >= 61200 & nTime < 82800 ~ "5pm - 11pm",
            .default = "other"
        ),
        # Shift numeric time so that 11pm is our 0
        nTime = ifelse(nTime >= 82800, nTime - 82800, nTime + 3600)
    )
cgm$TimePeriod <- factor(
    cgm$TimePeriod,
    levels = c("11pm - 5am", "5am - 11am", "11am - 5pm", "5pm - 11pm")
)
```

# Data cleaning and methods

- "True controls" were defined as the CGM tracings at least one year prior to the last clinic visit for a non-progressor. In other words, we are removing CGM tracings from people who are currently marked as non-progressors who we aren't 100% sure about.
- Differences in AUC were compared using the bootstrap with 200 replicates.

```{r}
cgm %>%
    group_by(ID) %>%
    mutate(
        nClinicVisits = length(unique(DOVISIT)),
        nCGMValues = length(SensorValue)
    ) %>%
    slice_min(row_number()) %>%
    ungroup() %>%
    select(
        nClinicVisits, nCGMValues, A1C, bmi, bmiz,
        screen_FDR_GP, HLAGRP, sex, Race_Ethn2,
        Group
    ) %>%
    tbl_summary(Group) %>%
    add_overall() %>%
    add_p()
```

# Simple GAM smooths

## All day

```{r}
cgm %>%
    ggplot(aes(x = as.POSIXct(Time), y = SensorValue, colour = Group)) +
    geom_smooth() +
    theme_classic() +
    ylab("Sensor Glucose (mg/dL)") +
    xlab("Time of Day") +
    scale_x_datetime(
        date_minor_breaks = "1 hour",
        date_breaks = "2 hours",
        date_labels = "%H:%M"
    ) +
    scale_color_manual(values = c("#66C2A5", "#FC8D62"))
```

## By time of day

```{r}
# Facet wrap has a hard time with the 11pm - 5am time period, so make plots
# manually
p1 <- cgm %>%
    filter(TimePeriod == "11pm - 5am") %>%
    ggplot(aes(x = nTime, y = SensorValue, colour = Group)) +
    geom_smooth() +
    theme_classic() +
    theme(plot.title = element_text(hjust = 0.5)) +
    ylab("Sensor Glucose (mg/dL)") +
    xlab("Time of Day") +
    ggtitle("11pm - 5am") +
    scale_x_continuous(
        breaks = seq(0, 21600, by = 3600),
        labels = c(
            "23:00",
            "00:00",
            "01:00",
            "02:00",
            "03:00",
            "04:00",
            "05:00"
        )
    ) +
    scale_color_manual(values = c("#66C2A5", "#FC8D62"))
p2 <- cgm %>%
    filter(TimePeriod == "5am - 11am") %>%
    ggplot(aes(x = as.POSIXct(Time), y = SensorValue, colour = Group)) +
    geom_smooth() +
    theme_classic() +
    theme(plot.title = element_text(hjust = 0.5)) +
    ylab("Sensor Glucose (mg/dL)") +
    xlab("Time of Day") +
    ggtitle("5am - 11am") +
    scale_x_datetime(date_breaks = "1 hour", date_labels = "%H:%M") +
    scale_color_manual(values = c("#66C2A5", "#FC8D62"))
p3 <- cgm %>%
    filter(TimePeriod == "11am - 5pm") %>%
    ggplot(aes(x = as.POSIXct(Time), y = SensorValue, colour = Group)) +
    geom_smooth() +
    theme_classic() +
    theme(plot.title = element_text(hjust = 0.5)) +
    ylab("Sensor Glucose (mg/dL)") +
    xlab("Time of Day") +
    ggtitle("11am - 5pm") +
    scale_x_datetime(date_breaks = "1 hour", date_labels = "%H:%M") +
    scale_color_manual(values = c("#66C2A5", "#FC8D62"))
p4 <- cgm %>%
    filter(TimePeriod == "5pm - 11pm") %>%
    ggplot(aes(x = as.POSIXct(Time), y = SensorValue, colour = Group)) +
    geom_smooth() +
    theme_classic() +
    theme(plot.title = element_text(hjust = 0.5)) +
    ylab("Sensor Glucose (mg/dL)") +
    xlab("Time of Day") +
    ggtitle("5pm - 11pm") +
    scale_x_datetime(date_breaks = "1 hour", date_labels = "%H:%M") +
    scale_color_manual(values = c("#66C2A5", "#FC8D62"))
(p1 + p2) / (p3 + p4) + plot_layout(guides = "collect")
```

# Functional PCA

## Chunks

### 6-9 Months Prior to Progression

- CGM data was limited to the CGM tracings at least 12 months away from last visit for non-progressors, and CGM tracings 6-9 months (180 to 270 days) prior to development of T1D for progressors.
- For each participant, we calculated the average sensor value at each time of day during the various periods of the day.

```{r}
cgm_filtered <- cgm %>%
    filter(
        Group == "Non-Progressor" |
            (Group == "Progressor" & DaysFromEndpoint >= -270 & DaysFromEndpoint <= -180)
    )
cgm_filtered %>%
    group_by(ID) %>%
    mutate(
        nClinicVisits = length(unique(DOVISIT)),
        nCGMValues = length(SensorValue)
    ) %>%
    slice_min(row_number()) %>%
    ungroup() %>%
    select(
        nClinicVisits,
        nCGMValues,
        screen_FDR_GP,
        HLAGRP,
        sex,
        Race_Ethn2,
        Group
    ) %>%
    tbl_summary(Group) %>%
    add_overall() %>%
    add_p()
```

```{r}
#| include: false
ps <-
    lapply(
        split.data.frame(cgm_filtered, cgm_filtered$TimePeriod),
        function(d) {
            # Time period
            tp <- as.character(d$TimePeriod[1])
            # Format data for analysis (why are these FDA packages so irritating)
            d <- d %>%
                group_by(ID, Group, nTime) %>%
                summarise(
                    SensorValue = mean(SensorValue, na.rm = T),
                    .groups = "drop"
                ) %>%
                arrange(nTime) %>%
                pivot_wider(
                    id_cols = c(ID, Group),
                    names_from = nTime,
                    values_from = SensorValue
                )
            glucose <- d %>%
                select(-ID, -Group) %>%
                as.matrix()
            d <- d %>%
                select(ID, Group) %>%
                as.data.frame()
            d$Glucose <- glucose
            d <- d[complete.cases(d), ]
            # FoSR
            fit_fosr <- bayes_fosr(Glucose ~ Group, data = d)
            # Plot
            pred <- data.frame(predict(fit_fosr))
            colnames(pred) <- colnames(glucose)
            pred$Group <- d$Group
            pred <- pred %>%
                distinct() %>%
                pivot_longer(-Group, names_to = "Time", values_to = "Glucose")
            pred$Time <- as.numeric(pred$Time)
            p <- ggplot(
                pred,
                aes(x = Time, y = Glucose, group = Group, colour = Group)
            ) +
                geom_line() +
                ggtitle(tp) +
                theme_classic() +
                ylim(c(90, 190)) +
                ylab("Sensor Glucose (mg/dL)") +
                xlab("Time of Day") +
                scale_color_manual(values = c("#66C2A5", "#FC8D62")) +
                theme(
                    plot.title = element_text(hjust = 0.5),
                    axis.text.x = element_text(angle = 45, vjust = 0.5)
                )
            if (tp == "11pm - 5am") {
                p <- p +
                    scale_x_continuous(
                        breaks = seq(0, 21600, by = 3600),
                        labels = c(
                            "23:00",
                            "00:00",
                            "01:00",
                            "02:00",
                            "03:00",
                            "04:00",
                            "05:00"
                        )
                    )
            } else if (tp == "5am - 11am") {
                p <- p +
                    scale_x_continuous(
                        breaks = seq(21600, 21600 + 21600, by = 3600),
                        labels = c(
                            "05:00",
                            "06:00",
                            "07:00",
                            "08:00",
                            "09:00",
                            "10:00",
                            "11:00"
                        )
                    )
            } else if (tp == "11am - 5pm") {
                p <- p +
                    scale_x_continuous(
                        breaks = seq(43200, 43200 + 21600, by = 3600),
                        labels = c(
                            "11:00",
                            "12:00",
                            "13:00",
                            "14:00",
                            "15:00",
                            "16:00",
                            "17:00"
                        )
                    )
            } else if (tp == "5pm - 11pm") {
                p <- p +
                    scale_x_continuous(
                        breaks = seq(64800, 64800 + 21600, by = 3600),
                        labels = c(
                            "17:00",
                            "18:00",
                            "19:00",
                            "20:00",
                            "21:00",
                            "22:00",
                            "23:00"
                        )
                    )
            }
            # AUC
            auc_prog <- trapz(
                pred$Time[pred$Group == "Progressor"] / 3600,
                pred$Glucose[pred$Group == "Progressor"]
            )
            auc_non_prog <- trapz(
                pred$Time[pred$Group == "Non-Progressor"] / 3600,
                pred$Glucose[pred$Group == "Non-Progressor"]
            )
            auc_diff <- auc_prog - auc_non_prog
            # Create a function for bootstrapping
            auc_diff_func <- function(d, indices) {
                fit_fosr <- bayes_fosr(Glucose ~ Group, d[indices, ])
                pred <- data.frame(predict(fit_fosr))
                colnames(pred) <- colnames(glucose)
                pred$Group <- d$Group
                pred <- pred %>%
                    distinct() %>%
                    pivot_longer(
                        -Group,
                        names_to = "Time",
                        values_to = "Glucose"
                    )
                auc_prog <- trapz(
                    as.numeric(pred$Time[pred$Group == "Progressor"]) / 3600,
                    pred$Glucose[pred$Group == "Progressor"]
                )
                auc_non_prog <- trapz(
                    as.numeric(pred$Time[pred$Group == "Non-Progressor"]) /
                        3600,
                    pred$Glucose[pred$Group == "Non-Progressor"]
                )
                auc_diff <- auc_prog - auc_non_prog
                return(auc_diff)
            }
            # Toot it and boot it
            reps <- boot(
                data = d,
                statistic = auc_diff_func,
                R = 200,
                strata = d$Group
            )
            ci <- boot.ci(reps, type = "bca")
            # Add to plot
            p <- p +
                annotate(
                    "text",
                    x = min(pred$Time) + (diff(range(pred$Time)) / 2),
                    y = 190,
                    label = paste0("AUC Difference: ", round(auc_diff))
                ) +
                annotate(
                    "text",
                    x = min(pred$Time) + (diff(range(pred$Time)) / 2),
                    y = 180,
                    label = paste0(
                        "(95% CI: ",
                        round(ci$bca[4]),
                        ", ",
                        round(ci$bca[5]),
                        ")"
                    )
                ) +
                geom_hline(yintercept = 140, linetype = "dashed")
            return(p)
        }
    )
```

```{r}
#| message: false
p1_69 <- ps[[1]]
p1_69_df <- p1_69$data
p1_69_df$Period <- "6-9 Months Prior to Progression"
p2_69 <- ps[[2]]
p2_69_df <- p2_69$data
p2_69_df$Period <- "6-9 Months Prior to Progression"
p3_69 <- ps[[3]]
p3_69_df <- p3_69$data
p3_69_df$Period <- "6-9 Months Prior to Progression"
p4_69 <- ps[[4]]
p4_69_df <- p4_69$data
p4_69_df$Period <- "6-9 Months Prior to Progression"
p1_69
p2_69
p3_69
p4_69
p_collected <- (p1_69 + p2_69) /
    (p3_69 + p4_69) +
    plot_layout(guides = "collect", axis_titles = "collect") +
    plot_annotation(
        title = "Function on Scalar Regression of CGM Data",
        theme = theme(plot.title = element_text(hjust = 0.5))
    )
p_collected
```

### 3-6 Months Prior to Progression

- CGM data was limited to the CGM tracings at least 12 months away from last visit for non-progressors, and CGM tracings 3-6 months (90 to 180 days) prior to development of T1D for progressors.
- For each participant, we calculated the average sensor value at each time of day during the various periods of the day.

```{r}
cgm_filtered <- cgm %>%
    filter(
        Group == "Non-Progressor" |
            (Group == "Progressor" & DaysFromEndpoint >= -180 & DaysFromEndpoint <= -90)
    )
cgm_filtered %>%
    group_by(ID) %>%
    mutate(
        nClinicVisits = length(unique(DOVISIT)),
        nCGMValues = length(SensorValue)
    ) %>%
    slice_min(row_number()) %>%
    ungroup() %>%
    select(
        nClinicVisits,
        nCGMValues,
        screen_FDR_GP,
        HLAGRP,
        sex,
        Race_Ethn2,
        Group
    ) %>%
    tbl_summary(Group) %>%
    add_overall() %>%
    add_p()
```

```{r}
#| include: false
ps <-
    lapply(
        split.data.frame(cgm_filtered, cgm_filtered$TimePeriod),
        function(d) {
            # Time period
            tp <- as.character(d$TimePeriod[1])
            # Format data for analysis (why are these FDA packages so irritating)
            d <- d %>%
                group_by(ID, Group, nTime) %>%
                summarise(
                    SensorValue = mean(SensorValue, na.rm = T),
                    .groups = "drop"
                ) %>%
                arrange(nTime) %>%
                pivot_wider(
                    id_cols = c(ID, Group),
                    names_from = nTime,
                    values_from = SensorValue
                )
            glucose <- d %>%
                select(-ID, -Group) %>%
                as.matrix()
            d <- d %>%
                select(ID, Group) %>%
                as.data.frame()
            d$Glucose <- glucose
            d <- d[complete.cases(d), ]
            # FoSR
            fit_fosr <- bayes_fosr(Glucose ~ Group, data = d)
            # Plot
            pred <- data.frame(predict(fit_fosr))
            colnames(pred) <- colnames(glucose)
            pred$Group <- d$Group
            pred <- pred %>%
                distinct() %>%
                pivot_longer(-Group, names_to = "Time", values_to = "Glucose")
            pred$Time <- as.numeric(pred$Time)
            p <- ggplot(
                pred,
                aes(x = Time, y = Glucose, group = Group, colour = Group)
            ) +
                geom_line() +
                ggtitle(tp) +
                theme_classic() +
                ylim(c(90, 190)) +
                ylab("Sensor Glucose (mg/dL)") +
                xlab("Time of Day") +
                scale_color_manual(values = c("#66C2A5", "#FC8D62")) +
                theme(
                    plot.title = element_text(hjust = 0.5),
                    axis.text.x = element_text(angle = 45, vjust = 0.5)
                )
            if (tp == "11pm - 5am") {
                p <- p +
                    scale_x_continuous(
                        breaks = seq(0, 21600, by = 3600),
                        labels = c(
                            "23:00",
                            "00:00",
                            "01:00",
                            "02:00",
                            "03:00",
                            "04:00",
                            "05:00"
                        )
                    )
            } else if (tp == "5am - 11am") {
                p <- p +
                    scale_x_continuous(
                        breaks = seq(21600, 21600 + 21600, by = 3600),
                        labels = c(
                            "05:00",
                            "06:00",
                            "07:00",
                            "08:00",
                            "09:00",
                            "10:00",
                            "11:00"
                        )
                    )
            } else if (tp == "11am - 5pm") {
                p <- p +
                    scale_x_continuous(
                        breaks = seq(43200, 43200 + 21600, by = 3600),
                        labels = c(
                            "11:00",
                            "12:00",
                            "13:00",
                            "14:00",
                            "15:00",
                            "16:00",
                            "17:00"
                        )
                    )
            } else if (tp == "5pm - 11pm") {
                p <- p +
                    scale_x_continuous(
                        breaks = seq(64800, 64800 + 21600, by = 3600),
                        labels = c(
                            "17:00",
                            "18:00",
                            "19:00",
                            "20:00",
                            "21:00",
                            "22:00",
                            "23:00"
                        )
                    )
            }
            # AUC
            auc_prog <- trapz(
                pred$Time[pred$Group == "Progressor"] / 3600,
                pred$Glucose[pred$Group == "Progressor"]
            )
            auc_non_prog <- trapz(
                pred$Time[pred$Group == "Non-Progressor"] / 3600,
                pred$Glucose[pred$Group == "Non-Progressor"]
            )
            auc_diff <- auc_prog - auc_non_prog
            # Create a function for bootstrapping
            auc_diff_func <- function(d, indices) {
                fit_fosr <- bayes_fosr(Glucose ~ Group, d[indices, ])
                pred <- data.frame(predict(fit_fosr))
                colnames(pred) <- colnames(glucose)
                pred$Group <- d$Group
                pred <- pred %>%
                    distinct() %>%
                    pivot_longer(
                        -Group,
                        names_to = "Time",
                        values_to = "Glucose"
                    )
                auc_prog <- trapz(
                    as.numeric(pred$Time[pred$Group == "Progressor"]) / 3600,
                    pred$Glucose[pred$Group == "Progressor"]
                )
                auc_non_prog <- trapz(
                    as.numeric(pred$Time[pred$Group == "Non-Progressor"]) /
                        3600,
                    pred$Glucose[pred$Group == "Non-Progressor"]
                )
                auc_diff <- auc_prog - auc_non_prog
                return(auc_diff)
            }
            # Toot it and boot it
            reps <- boot(
                data = d,
                statistic = auc_diff_func,
                R = 200,
                strata = d$Group
            )
            ci <- boot.ci(reps, type = "bca")
            # Add to plot
            p <- p +
                annotate(
                    "text",
                    x = min(pred$Time) + (diff(range(pred$Time)) / 2),
                    y = 190,
                    label = paste0("AUC Difference: ", round(auc_diff))
                ) +
                annotate(
                    "text",
                    x = min(pred$Time) + (diff(range(pred$Time)) / 2),
                    y = 180,
                    label = paste0(
                        "(95% CI: ",
                        round(ci$bca[4]),
                        ", ",
                        round(ci$bca[5]),
                        ")"
                    )
                ) +
                geom_hline(yintercept = 140, linetype = "dashed")
            return(p)
        }
    )
```

```{r}
#| message: false
p1_36 <- ps[[1]]
p1_36_df <- p1_36$data
p1_36_df$Period <- "3-6 Months Prior to Progression"
p2_36 <- ps[[2]]
p2_36_df <- p2_36$data
p2_36_df$Period <- "3-6 Months Prior to Progression"
p3_36 <- ps[[3]]
p3_36_df <- p3_36$data
p3_36_df$Period <- "3-6 Months Prior to Progression"
p4_36 <- ps[[4]]
p4_36_df <- p4_36$data
p4_36_df$Period <- "3-6 Months Prior to Progression"
p1_36
p2_36
p3_36
p4_36
p_collected <- (p1_36 + p2_36) /
    (p3_36 + p4_36) +
    plot_layout(guides = "collect", axis_titles = "collect") +
    plot_annotation(
        title = "Function on Scalar Regression of CGM Data",
        theme = theme(plot.title = element_text(hjust = 0.5))
    )
p_collected
```

### 3 Months Prior to Progression

- CGM data was limited to the CGM tracings at least 12 months away from last visit for non-progressors, and CGM tracings 3 months (90 days) prior to and at the time of development of T1D for progressors.
- For each participant, we calculated the average sensor value at each time of day during the various periods of the day.

```{r}
cgm_filtered <- cgm %>%
    filter(
        Group == "Non-Progressor" |
            (Group == "Progressor" & DaysFromEndpoint >= -90 & DaysFromEndpoint <= 0)
    )
cgm_filtered %>%
    group_by(ID) %>%
    mutate(
        nClinicVisits = length(unique(DOVISIT)),
        nCGMValues = length(SensorValue)
    ) %>%
    slice_min(row_number()) %>%
    ungroup() %>%
    select(
        nClinicVisits,
        nCGMValues,
        screen_FDR_GP,
        HLAGRP,
        sex,
        Race_Ethn2,
        Group
    ) %>%
    tbl_summary(Group) %>%
    add_overall() %>%
    add_p()
```

```{r}
#| include: false
ps <-
    lapply(
        split.data.frame(cgm_filtered, cgm_filtered$TimePeriod),
        function(d) {
            # Time period
            tp <- as.character(d$TimePeriod[1])
            # Format data for analysis (why are these FDA packages so irritating)
            d <- d %>%
                group_by(ID, Group, nTime) %>%
                summarise(
                    SensorValue = mean(SensorValue, na.rm = T),
                    .groups = "drop"
                ) %>%
                arrange(nTime) %>%
                pivot_wider(
                    id_cols = c(ID, Group),
                    names_from = nTime,
                    values_from = SensorValue
                )
            glucose <- d %>%
                select(-ID, -Group) %>%
                as.matrix()
            d <- d %>%
                select(ID, Group) %>%
                as.data.frame()
            d$Glucose <- glucose
            d <- d[complete.cases(d), ]
            # FoSR
            fit_fosr <- bayes_fosr(Glucose ~ Group, data = d)
            # Plot
            pred <- data.frame(predict(fit_fosr))
            colnames(pred) <- colnames(glucose)
            pred$Group <- d$Group
            pred <- pred %>%
                distinct() %>%
                pivot_longer(-Group, names_to = "Time", values_to = "Glucose")
            pred$Time <- as.numeric(pred$Time)
            p <- ggplot(
                pred,
                aes(x = Time, y = Glucose, group = Group, colour = Group)
            ) +
                geom_line() +
                ggtitle(tp) +
                theme_classic() +
                ylim(c(90, 190)) +
                ylab("Sensor Glucose (mg/dL)") +
                xlab("Time of Day") +
                scale_color_manual(values = c("#66C2A5", "#FC8D62")) +
                theme(
                    plot.title = element_text(hjust = 0.5),
                    axis.text.x = element_text(angle = 45, vjust = 0.5)
                )
            if (tp == "11pm - 5am") {
                p <- p +
                    scale_x_continuous(
                        breaks = seq(0, 21600, by = 3600),
                        labels = c(
                            "23:00",
                            "00:00",
                            "01:00",
                            "02:00",
                            "03:00",
                            "04:00",
                            "05:00"
                        )
                    )
            } else if (tp == "5am - 11am") {
                p <- p +
                    scale_x_continuous(
                        breaks = seq(21600, 21600 + 21600, by = 3600),
                        labels = c(
                            "05:00",
                            "06:00",
                            "07:00",
                            "08:00",
                            "09:00",
                            "10:00",
                            "11:00"
                        )
                    )
            } else if (tp == "11am - 5pm") {
                p <- p +
                    scale_x_continuous(
                        breaks = seq(43200, 43200 + 21600, by = 3600),
                        labels = c(
                            "11:00",
                            "12:00",
                            "13:00",
                            "14:00",
                            "15:00",
                            "16:00",
                            "17:00"
                        )
                    )
            } else if (tp == "5pm - 11pm") {
                p <- p +
                    scale_x_continuous(
                        breaks = seq(64800, 64800 + 21600, by = 3600),
                        labels = c(
                            "17:00",
                            "18:00",
                            "19:00",
                            "20:00",
                            "21:00",
                            "22:00",
                            "23:00"
                        )
                    )
            }
            # AUC
            auc_prog <- trapz(
                pred$Time[pred$Group == "Progressor"] / 3600,
                pred$Glucose[pred$Group == "Progressor"]
            )
            auc_non_prog <- trapz(
                pred$Time[pred$Group == "Non-Progressor"] / 3600,
                pred$Glucose[pred$Group == "Non-Progressor"]
            )
            auc_diff <- auc_prog - auc_non_prog
            # Create a function for bootstrapping
            auc_diff_func <- function(d, indices) {
                fit_fosr <- bayes_fosr(Glucose ~ Group, d[indices, ])
                pred <- data.frame(predict(fit_fosr))
                colnames(pred) <- colnames(glucose)
                pred$Group <- d$Group
                pred <- pred %>%
                    distinct() %>%
                    pivot_longer(
                        -Group,
                        names_to = "Time",
                        values_to = "Glucose"
                    )
                auc_prog <- trapz(
                    as.numeric(pred$Time[pred$Group == "Progressor"]) / 3600,
                    pred$Glucose[pred$Group == "Progressor"]
                )
                auc_non_prog <- trapz(
                    as.numeric(pred$Time[pred$Group == "Non-Progressor"]) /
                        3600,
                    pred$Glucose[pred$Group == "Non-Progressor"]
                )
                auc_diff <- auc_prog - auc_non_prog
                return(auc_diff)
            }
            # Toot it and boot it
            reps <- boot(
                data = d,
                statistic = auc_diff_func,
                R = 200,
                strata = d$Group
            )
            ci <- boot.ci(reps, type = "bca")
            # Add to plot
            p <- p +
                annotate(
                    "text",
                    x = min(pred$Time) + (diff(range(pred$Time)) / 2),
                    y = 190,
                    label = paste0("AUC Difference: ", round(auc_diff))
                ) +
                annotate(
                    "text",
                    x = min(pred$Time) + (diff(range(pred$Time)) / 2),
                    y = 180,
                    label = paste0(
                        "(95% CI: ",
                        round(ci$bca[4]),
                        ", ",
                        round(ci$bca[5]),
                        ")"
                    )
                ) +
                geom_hline(yintercept = 140, linetype = "dashed")
            return(p)
        }
    )
```

```{r}
#| message: false
p1_30 <- ps[[1]]
p1_30_df <- p1_30$data
p1_30_df$Period <- "3 Months Prior to Progression"
p2_30 <- ps[[2]]
p2_30_df <- p2_30$data
p2_30_df$Period <- "3 Months Prior to Progression"
p3_30 <- ps[[3]]
p3_30_df <- p3_30$data
p3_30_df$Period <- "3 Months Prior to Progression"
p4_30 <- ps[[4]]
p4_30_df <- p4_30$data
p1_30
p2_30
p3_30
p4_30
p4_30_df$Period <- "3 Months Prior to Progression"
p_collected <- (p1_30 + p2_30) /
    (p3_30 + p4_30) +
    plot_layout(guides = "collect", axis_titles = "collect") +
    plot_annotation(
        title = "Function on Scalar Regression of CGM Data",
        theme = theme(plot.title = element_text(hjust = 0.5))
    )
p_collected
```

### Post-Progression

- CGM data was limited to the CGM tracings at least 12 months away from last visit for non-progressors, and CGM tracings 3 months (90 days) after and at the time of development of T1D for progressors.
- For each participant, we calculated the average sensor value at each time of day during the various periods of the day.

```{r}
cgm_filtered <- cgm %>%
    filter(
        Group == "Non-Progressor" |
            (Group == "Progressor" & DaysFromEndpoint >= 0 & DaysFromEndpoint <= 90)
    )
cgm_filtered %>%
    group_by(ID) %>%
    mutate(
        nClinicVisits = length(unique(DOVISIT)),
        nCGMValues = length(SensorValue)
    ) %>%
    slice_min(row_number()) %>%
    ungroup() %>%
    select(
        nClinicVisits,
        nCGMValues,
        screen_FDR_GP,
        HLAGRP,
        sex,
        Race_Ethn2,
        Group
    ) %>%
    tbl_summary(Group) %>%
    add_overall() %>%
    add_p()
```

```{r}
#| include: false
ps <-
    lapply(
        split.data.frame(cgm_filtered, cgm_filtered$TimePeriod),
        function(d) {
            # Time period
            tp <- as.character(d$TimePeriod[1])
            # Format data for analysis (why are these FDA packages so irritating)
            d <- d %>%
                group_by(ID, Group, nTime) %>%
                summarise(
                    SensorValue = mean(SensorValue, na.rm = T),
                    .groups = "drop"
                ) %>%
                arrange(nTime) %>%
                pivot_wider(
                    id_cols = c(ID, Group),
                    names_from = nTime,
                    values_from = SensorValue
                )
            glucose <- d %>%
                select(-ID, -Group) %>%
                as.matrix()
            d <- d %>%
                select(ID, Group) %>%
                as.data.frame()
            d$Glucose <- glucose
            d <- d[complete.cases(d), ]
            # FoSR
            fit_fosr <- bayes_fosr(Glucose ~ Group, data = d)
            # Plot
            pred <- data.frame(predict(fit_fosr))
            colnames(pred) <- colnames(glucose)
            pred$Group <- d$Group
            pred <- pred %>%
                distinct() %>%
                pivot_longer(-Group, names_to = "Time", values_to = "Glucose")
            pred$Time <- as.numeric(pred$Time)
            p <- ggplot(
                pred,
                aes(x = Time, y = Glucose, group = Group, colour = Group)
            ) +
                geom_line() +
                ggtitle(tp) +
                theme_classic() +
                ylim(c(90, 190)) +
                ylab("Sensor Glucose (mg/dL)") +
                xlab("Time of Day") +
                scale_color_manual(values = c("#66C2A5", "#FC8D62")) +
                theme(
                    plot.title = element_text(hjust = 0.5),
                    axis.text.x = element_text(angle = 45, vjust = 0.5)
                )
            if (tp == "11pm - 5am") {
                p <- p +
                    scale_x_continuous(
                        breaks = seq(0, 21600, by = 3600),
                        labels = c(
                            "23:00",
                            "00:00",
                            "01:00",
                            "02:00",
                            "03:00",
                            "04:00",
                            "05:00"
                        )
                    )
            } else if (tp == "5am - 11am") {
                p <- p +
                    scale_x_continuous(
                        breaks = seq(21600, 21600 + 21600, by = 3600),
                        labels = c(
                            "05:00",
                            "06:00",
                            "07:00",
                            "08:00",
                            "09:00",
                            "10:00",
                            "11:00"
                        )
                    )
            } else if (tp == "11am - 5pm") {
                p <- p +
                    scale_x_continuous(
                        breaks = seq(43200, 43200 + 21600, by = 3600),
                        labels = c(
                            "11:00",
                            "12:00",
                            "13:00",
                            "14:00",
                            "15:00",
                            "16:00",
                            "17:00"
                        )
                    )
            } else if (tp == "5pm - 11pm") {
                p <- p +
                    scale_x_continuous(
                        breaks = seq(64800, 64800 + 21600, by = 3600),
                        labels = c(
                            "17:00",
                            "18:00",
                            "19:00",
                            "20:00",
                            "21:00",
                            "22:00",
                            "23:00"
                        )
                    )
            }
            # AUC
            auc_prog <- trapz(
                pred$Time[pred$Group == "Progressor"] / 3600,
                pred$Glucose[pred$Group == "Progressor"]
            )
            auc_non_prog <- trapz(
                pred$Time[pred$Group == "Non-Progressor"] / 3600,
                pred$Glucose[pred$Group == "Non-Progressor"]
            )
            auc_diff <- auc_prog - auc_non_prog
            # Create a function for bootstrapping
            auc_diff_func <- function(d, indices) {
                fit_fosr <- bayes_fosr(Glucose ~ Group, d[indices, ])
                pred <- data.frame(predict(fit_fosr))
                colnames(pred) <- colnames(glucose)
                pred$Group <- d$Group
                pred <- pred %>%
                    distinct() %>%
                    pivot_longer(
                        -Group,
                        names_to = "Time",
                        values_to = "Glucose"
                    )
                auc_prog <- trapz(
                    as.numeric(pred$Time[pred$Group == "Progressor"]) / 3600,
                    pred$Glucose[pred$Group == "Progressor"]
                )
                auc_non_prog <- trapz(
                    as.numeric(pred$Time[pred$Group == "Non-Progressor"]) /
                        3600,
                    pred$Glucose[pred$Group == "Non-Progressor"]
                )
                auc_diff <- auc_prog - auc_non_prog
                return(auc_diff)
            }
            # Toot it and boot it
            reps <- boot(
                data = d,
                statistic = auc_diff_func,
                R = 200,
                strata = d$Group
            )
            ci <- boot.ci(reps, type = "bca")
            # Add to plot
            p <- p +
                annotate(
                    "text",
                    x = min(pred$Time) + (diff(range(pred$Time)) / 2),
                    y = 190,
                    label = paste0("AUC Difference: ", round(auc_diff))
                ) +
                annotate(
                    "text",
                    x = min(pred$Time) + (diff(range(pred$Time)) / 2),
                    y = 180,
                    label = paste0(
                        "(95% CI: ",
                        round(ci$bca[4]),
                        ", ",
                        round(ci$bca[5]),
                        ")"
                    )
                ) +
                geom_hline(yintercept = 140, linetype = "dashed")
            return(p)
        }
    )
```

```{r}
#| message: false
p1_0 <- ps[[1]]
p1_0_df <- p1_0$data
p1_0_df$Period <- "Post-Progression"
p2_0 <- ps[[2]]
p2_0_df <- p2_0$data
p2_0_df$Period <- "Post-Progression"
p3_0 <- ps[[3]]
p3_0_df <- p3_0$data
p3_0_df$Period <- "Post-Progression"
p4_0 <- ps[[4]]
p4_0_df <- p4_0$data
p4_0_df$Period <- "Post-Progression"
p1_0
p2_0
p3_0
p4_0
p_collected <- (p1_0 + p2_0) /
    (p3_0 + p4_0) +
    plot_layout(guides = "collect", axis_titles = "collect") +
    plot_annotation(
        title = "Function on Scalar Regression of CGM Data",
        theme = theme(plot.title = element_text(hjust = 0.5))
    )
p_collected
```

### Combined figure

```{r}
#| message: false
# P1
p1_df <- do.call(rbind, list(p1_69_df, p1_36_df, p1_30_df, p1_0_df))
p1_non_prog <- p1_df %>% filter(Group == "Non-Progressor")
p1_non_prog <- p1_non_prog %>%
    group_by(Group, Time) %>%
    summarise(Glucose = mean(Glucose)) %>%
    mutate(Period = "12 Months Prior to Last Clinic Visit") %>%
    distinct()
p1_prog <- p1_df %>% filter(Group == "Progressor")
p1_df <- rbind(p1_prog, p1_non_prog)
p1 <- ggplot(
    p1_df,
    aes(
        x = Time,
        y = Glucose,
        group = interaction(Group, Period),
        colour = Group,
        linetype = Period
    )
) +
    geom_line() +
    theme_classic() +
    ylim(c(90, 190)) +
    ylab("Sensor Glucose (mg/dL)") +
    xlab("Time of Day") +
    ggtitle("11pm - 5am") +
    geom_hline(yintercept = 140, linetype = "dashed") +
    scale_color_manual(values = c("#66C2A5", "#FC8D62")) +
    theme(
        plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 45, vjust = 0.5)
    ) +
    scale_x_continuous(
        breaks = seq(0, 21600, by = 3600),
        labels = c(
            "23:00",
            "00:00",
            "01:00",
            "02:00",
            "03:00",
            "04:00",
            "05:00"
        )
    )
# P2
p2_df <- do.call(rbind, list(p2_69_df, p2_36_df, p2_30_df, p2_0_df))
p2_non_prog <- p2_df %>% filter(Group == "Non-Progressor")
p2_non_prog <- p2_non_prog %>%
    group_by(Group, Time) %>%
    summarise(Glucose = mean(Glucose)) %>%
    mutate(Period = "12 Months Prior to Last Clinic Visit") %>%
    distinct()
p2_prog <- p2_df %>% filter(Group == "Progressor")
p2_df <- rbind(p2_prog, p2_non_prog)
p2 <- ggplot(
    p2_df,
    aes(
        x = Time,
        y = Glucose,
        group = interaction(Group, Period),
        colour = Group,
        linetype = Period
    )
) +
    geom_line() +
    theme_classic() +
    ylim(c(90, 190)) +
    ylab("Sensor Glucose (mg/dL)") +
    xlab("Time of Day") +
    ggtitle("5am - 11am") +
    geom_hline(yintercept = 140, linetype = "dashed") +
    scale_color_manual(values = c("#66C2A5", "#FC8D62")) +
    theme(
        plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 45, vjust = 0.5)
    ) +
    scale_x_continuous(
        breaks = seq(21600, 21600 + 21600, by = 3600),
        labels = c(
            "05:00",
            "06:00",
            "07:00",
            "08:00",
            "09:00",
            "10:00",
            "11:00"
        )
    )
# P3
p3_df <- do.call(rbind, list(p3_69_df, p3_36_df, p3_30_df, p3_0_df))
p3_non_prog <- p3_df %>% filter(Group == "Non-Progressor")
p3_non_prog <- p3_non_prog %>%
    group_by(Group, Time) %>%
    summarise(Glucose = mean(Glucose)) %>%
    mutate(Period = "12 Months Prior to Last Clinic Visit") %>%
    distinct()
p3_prog <- p3_df %>% filter(Group == "Progressor")
p3_df <- rbind(p3_prog, p3_non_prog)
p3 <- ggplot(
    p3_df,
    aes(
        x = Time,
        y = Glucose,
        group = interaction(Group, Period),
        colour = Group,
        linetype = Period
    )
) +
    geom_line() +
    theme_classic() +
    ylim(c(90, 190)) +
    ylab("Sensor Glucose (mg/dL)") +
    xlab("Time of Day") +
    ggtitle("11am - 5pm") +
    geom_hline(yintercept = 140, linetype = "dashed") +
    scale_color_manual(values = c("#66C2A5", "#FC8D62")) +
    theme(
        plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 45, vjust = 0.5)
    ) +
    scale_x_continuous(
        breaks = seq(43200, 43200 + 21600, by = 3600),
        labels = c(
            "11:00",
            "12:00",
            "13:00",
            "14:00",
            "15:00",
            "16:00",
            "17:00"
        )
    )
# P4
p4_df <- do.call(rbind, list(p4_69_df, p4_36_df, p4_30_df, p4_0_df))
p4_non_prog <- p4_df %>% filter(Group == "Non-Progressor")
p4_non_prog <- p4_non_prog %>%
    group_by(Group, Time) %>%
    summarise(Glucose = mean(Glucose)) %>%
    mutate(Period = "12 Months Prior to Last Clinic Visit") %>%
    distinct()
p4_prog <- p4_df %>% filter(Group == "Progressor")
p4_df <- rbind(p4_prog, p4_non_prog)
p4 <- ggplot(
    p4_df,
    aes(
        x = Time,
        y = Glucose,
        group = interaction(Group, Period),
        colour = Group,
        linetype = Period
    )
) +
    geom_line() +
    theme_classic() +
    ylim(c(90, 190)) +
    ylab("Sensor Glucose (mg/dL)") +
    xlab("Time of Day") +
    ggtitle("5pm - 11pm") +
    geom_hline(yintercept = 140, linetype = "dashed") +
    scale_color_manual(values = c("#66C2A5", "#FC8D62")) +
    theme(
        plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 45, vjust = 0.5)
    ) +
    scale_x_continuous(
        breaks = seq(64800, 64800 + 21600, by = 3600),
        labels = c(
            "17:00",
            "18:00",
            "19:00",
            "20:00",
            "21:00",
            "22:00",
            "23:00"
        )
    )
# Final
p_collected <- (p1 + p2) /
    (p3 + p4) +
    plot_layout(guides = "collect", axis_titles = "collect") +
    plot_annotation(
        title = "Function on Scalar Regression of CGM Data",
        theme = theme(plot.title = element_text(hjust = 0.5))
    )
p_collected
```

## All day

### 6-9 Months Prior to Progression

- CGM data was limited to the CGM tracings at least 12 months away from last visit for non-progressors, and CGM tracings 6-9 months (180 to 270 days) prior to development of T1D for progressors.
- For each participant, we calculated the average sensor value at each time of day during the various periods of the day.

```{r}
cgm_filtered <- cgm %>%
    filter(
        Group == "Non-Progressor" |
            (Group == "Progressor" & DaysFromEndpoint >= -270 & DaysFromEndpoint <= -180)
    )
cgm_filtered %>%
    group_by(ID) %>%
    mutate(
        nClinicVisits = length(unique(DOVISIT)),
        nCGMValues = length(SensorValue)
    ) %>%
    slice_min(row_number()) %>%
    ungroup() %>%
    select(
        nClinicVisits,
        nCGMValues,
        screen_FDR_GP,
        HLAGRP,
        sex,
        Race_Ethn2,
        Group
    ) %>%
    tbl_summary(Group) %>%
    add_overall() %>%
    add_p()
```

```{r}
#| include: false
# Format data for analysis (why are these FDA packages so irritating)
d <- cgm_filtered %>%
    group_by(ID, Group, nTime) %>%
    summarise(SensorValue = mean(SensorValue, na.rm = T), .groups = "drop") %>%
    arrange(nTime) %>%
    pivot_wider(
        id_cols = c(ID, Group),
        names_from = nTime,
        values_from = SensorValue
    )
glucose <- d %>%
    select(-ID, -Group) %>%
    as.matrix()
d <- d %>%
    select(ID, Group) %>%
    as.data.frame()
d$Glucose <- glucose
d <- d[complete.cases(d), ]
# FoSR
fit_fosr <- bayes_fosr(Glucose ~ Group, data = d)
# Plot
pred <- data.frame(predict(fit_fosr))
colnames(pred) <- colnames(glucose)
pred$Group <- d$Group
pred <- pred %>%
    distinct() %>%
    pivot_longer(-Group, names_to = "Time", values_to = "Glucose")
pred$Time <- as.numeric(pred$Time)
p <- ggplot(pred, aes(x = Time, y = Glucose, group = Group, colour = Group)) +
    geom_line() +
    theme_classic() +
    ylim(c(90, 190)) +
    ylab("Sensor Glucose (mg/dL)") +
    xlab("Time of Day") +
    scale_color_manual(values = c("#66C2A5", "#FC8D62")) +
    theme(
        plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 45, vjust = 0.5)
    ) +
    scale_x_continuous(
        breaks = seq(0, 86400, by = 3600 * 2),
        labels = paste0(seq(0, 24, by = 2), ":00:00")
    )
# AUC
auc_prog <- trapz(
    pred$Time[pred$Group == "Progressor"] / 3600,
    pred$Glucose[pred$Group == "Progressor"]
)
auc_non_prog <- trapz(
    pred$Time[pred$Group == "Non-Progressor"] / 3600,
    pred$Glucose[pred$Group == "Non-Progressor"]
)
auc_diff <- auc_prog - auc_non_prog
# Create a function for bootstrapping
auc_diff_func <- function(d, indices) {
    fit_fosr <- bayes_fosr(Glucose ~ Group, d[indices, ])
    pred <- data.frame(predict(fit_fosr))
    colnames(pred) <- colnames(glucose)
    pred$Group <- d$Group
    pred <- pred %>%
        distinct() %>%
        pivot_longer(-Group, names_to = "Time", values_to = "Glucose")
    auc_prog <- trapz(
        as.numeric(pred$Time[pred$Group == "Progressor"]) / 3600,
        pred$Glucose[pred$Group == "Progressor"]
    )
    auc_non_prog <- trapz(
        as.numeric(pred$Time[pred$Group == "Non-Progressor"]) / 3600,
        pred$Glucose[pred$Group == "Non-Progressor"]
    )
    auc_diff <- auc_prog - auc_non_prog
    return(auc_diff)
}
# Toot it and boot it
reps <- boot(data = d, statistic = auc_diff_func, R = 200, strata = d$Group)
ci <- boot.ci(reps, type = "bca")
# Add to plot
p_69 <- p +
    annotate(
        "text",
        x = min(pred$Time) + (diff(range(pred$Time)) / 2),
        y = 190,
        label = paste0("AUC Difference: ", round(auc_diff))
    ) +
    annotate(
        "text",
        x = min(pred$Time) + (diff(range(pred$Time)) / 2),
        y = 180,
        label = paste0(
            "(95% CI: ",
            round(ci$bca[4]),
            ", ",
            round(ci$bca[5]),
            ")"
        )
    ) +
    geom_hline(yintercept = 140, linetype = "dashed")
```

```{r}
#| message: false
p_69
p_69_df <- p_69$data
p_69_df$Period <- "6-9 Months Prior to Progression"
```

### 3-6 Months Prior to Progression

- CGM data was limited to the CGM tracings at least 12 months away from last visit for non-progressors, and CGM tracings 3-6 months (90 to 180 days) prior to development of T1D for progressors.
- For each participant, we calculated the average sensor value at each time of day during the various periods of the day.

```{r}
cgm_filtered <- cgm %>%
    filter(
        Group == "Non-Progressor" |
            (Group == "Progressor" & DaysFromEndpoint >= -180 & DaysFromEndpoint <= -90)
    )
cgm_filtered %>%
    group_by(ID) %>%
    mutate(
        nClinicVisits = length(unique(DOVISIT)),
        nCGMValues = length(SensorValue)
    ) %>%
    slice_min(row_number()) %>%
    ungroup() %>%
    select(
        nClinicVisits,
        nCGMValues,
        screen_FDR_GP,
        HLAGRP,
        sex,
        Race_Ethn2,
        Group
    ) %>%
    tbl_summary(Group) %>%
    add_overall() %>%
    add_p()
```

```{r}
#| include: false
d <- cgm_filtered %>%
    group_by(ID, Group, nTime) %>%
    summarise(SensorValue = mean(SensorValue, na.rm = T), .groups = "drop") %>%
    arrange(nTime) %>%
    pivot_wider(
        id_cols = c(ID, Group),
        names_from = nTime,
        values_from = SensorValue
    )
glucose <- d %>%
    select(-ID, -Group) %>%
    as.matrix()
d <- d %>%
    select(ID, Group) %>%
    as.data.frame()
d$Glucose <- glucose
d <- d[complete.cases(d), ]
# FoSR
fit_fosr <- bayes_fosr(Glucose ~ Group, data = d)
# Plot
pred <- data.frame(predict(fit_fosr))
colnames(pred) <- colnames(glucose)
pred$Group <- d$Group
pred <- pred %>%
    distinct() %>%
    pivot_longer(-Group, names_to = "Time", values_to = "Glucose")
pred$Time <- as.numeric(pred$Time)
p <- ggplot(pred, aes(x = Time, y = Glucose, group = Group, colour = Group)) +
    geom_line() +
    theme_classic() +
    ylim(c(90, 190)) +
    ylab("Sensor Glucose (mg/dL)") +
    xlab("Time of Day") +
    scale_color_manual(values = c("#66C2A5", "#FC8D62")) +
    theme(
        plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 45, vjust = 0.5)
    ) +
    scale_x_continuous(
        breaks = seq(0, 86400, by = 3600 * 2),
        labels = paste0(seq(0, 24, by = 2), ":00:00")
    )
# AUC
auc_prog <- trapz(
    pred$Time[pred$Group == "Progressor"] / 3600,
    pred$Glucose[pred$Group == "Progressor"]
)
auc_non_prog <- trapz(
    pred$Time[pred$Group == "Non-Progressor"] / 3600,
    pred$Glucose[pred$Group == "Non-Progressor"]
)
auc_diff <- auc_prog - auc_non_prog
# Create a function for bootstrapping
auc_diff_func <- function(d, indices) {
    fit_fosr <- bayes_fosr(Glucose ~ Group, d[indices, ])
    pred <- data.frame(predict(fit_fosr))
    colnames(pred) <- colnames(glucose)
    pred$Group <- d$Group
    pred <- pred %>%
        distinct() %>%
        pivot_longer(-Group, names_to = "Time", values_to = "Glucose")
    auc_prog <- trapz(
        as.numeric(pred$Time[pred$Group == "Progressor"]) / 3600,
        pred$Glucose[pred$Group == "Progressor"]
    )
    auc_non_prog <- trapz(
        as.numeric(pred$Time[pred$Group == "Non-Progressor"]) / 3600,
        pred$Glucose[pred$Group == "Non-Progressor"]
    )
    auc_diff <- auc_prog - auc_non_prog
    return(auc_diff)
}
# Toot it and boot it
reps <- boot(data = d, statistic = auc_diff_func, R = 200, strata = d$Group)
ci <- boot.ci(reps, type = "bca")
# Add to plot
p_36 <- p +
    annotate(
        "text",
        x = min(pred$Time) + (diff(range(pred$Time)) / 2),
        y = 190,
        label = paste0("AUC Difference: ", round(auc_diff))
    ) +
    annotate(
        "text",
        x = min(pred$Time) + (diff(range(pred$Time)) / 2),
        y = 180,
        label = paste0(
            "(95% CI: ",
            round(ci$bca[4]),
            ", ",
            round(ci$bca[5]),
            ")"
        )
    ) +
    geom_hline(yintercept = 140, linetype = "dashed")
```

```{r}
#| message: false
p_36
p_36_df <- p_36$data
p_36_df$Period <- "3-6 Months Prior to Progression"
```

### 3 Months Prior to Progression

- CGM data was limited to the CGM tracings at least 12 months away from last visit for non-progressors, and CGM tracings 3 months (90 days) prior to and at the time of development of T1D for progressors.
- For each participant, we calculated the average sensor value at each time of day during the various periods of the day.

```{r}
cgm_filtered <- cgm %>%
    filter(
        Group == "Non-Progressor" |
            (Group == "Progressor" & DaysFromEndpoint >= -90 & DaysFromEndpoint <= 0)
    )
cgm_filtered %>%
    group_by(ID) %>%
    mutate(
        nClinicVisits = length(unique(DOVISIT)),
        nCGMValues = length(SensorValue)
    ) %>%
    slice_min(row_number()) %>%
    ungroup() %>%
    select(
        nClinicVisits,
        nCGMValues,
        screen_FDR_GP,
        HLAGRP,
        sex,
        Race_Ethn2,
        Group
    ) %>%
    tbl_summary(Group) %>%
    add_overall() %>%
    add_p()
```

```{r}
#| include: false
d <- cgm_filtered %>%
    group_by(ID, Group, nTime) %>%
    summarise(SensorValue = mean(SensorValue, na.rm = T), .groups = "drop") %>%
    arrange(nTime) %>%
    pivot_wider(
        id_cols = c(ID, Group),
        names_from = nTime,
        values_from = SensorValue
    )
glucose <- d %>%
    select(-ID, -Group) %>%
    as.matrix()
d <- d %>%
    select(ID, Group) %>%
    as.data.frame()
d$Glucose <- glucose
d <- d[complete.cases(d), ]
# FoSR
fit_fosr <- bayes_fosr(Glucose ~ Group, data = d)
# Plot
pred <- data.frame(predict(fit_fosr))
colnames(pred) <- colnames(glucose)
pred$Group <- d$Group
pred <- pred %>%
    distinct() %>%
    pivot_longer(-Group, names_to = "Time", values_to = "Glucose")
pred$Time <- as.numeric(pred$Time)
p <- ggplot(pred, aes(x = Time, y = Glucose, group = Group, colour = Group)) +
    geom_line() +
    theme_classic() +
    ylim(c(90, 190)) +
    ylab("Sensor Glucose (mg/dL)") +
    xlab("Time of Day") +
    scale_color_manual(values = c("#66C2A5", "#FC8D62")) +
    theme(
        plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 45, vjust = 0.5)
    ) +
    scale_x_continuous(
        breaks = seq(0, 86400, by = 3600 * 2),
        labels = paste0(seq(0, 24, by = 2), ":00:00")
    )
# AUC
auc_prog <- trapz(
    pred$Time[pred$Group == "Progressor"] / 3600,
    pred$Glucose[pred$Group == "Progressor"]
)
auc_non_prog <- trapz(
    pred$Time[pred$Group == "Non-Progressor"] / 3600,
    pred$Glucose[pred$Group == "Non-Progressor"]
)
auc_diff <- auc_prog - auc_non_prog
# Create a function for bootstrapping
auc_diff_func <- function(d, indices) {
    fit_fosr <- bayes_fosr(Glucose ~ Group, d[indices, ])
    pred <- data.frame(predict(fit_fosr))
    colnames(pred) <- colnames(glucose)
    pred$Group <- d$Group
    pred <- pred %>%
        distinct() %>%
        pivot_longer(-Group, names_to = "Time", values_to = "Glucose")
    auc_prog <- trapz(
        as.numeric(pred$Time[pred$Group == "Progressor"]) / 3600,
        pred$Glucose[pred$Group == "Progressor"]
    )
    auc_non_prog <- trapz(
        as.numeric(pred$Time[pred$Group == "Non-Progressor"]) / 3600,
        pred$Glucose[pred$Group == "Non-Progressor"]
    )
    auc_diff <- auc_prog - auc_non_prog
    return(auc_diff)
}
# Toot it and boot it
reps <- boot(data = d, statistic = auc_diff_func, R = 200, strata = d$Group)
ci <- boot.ci(reps, type = "bca")
# Add to plot
p_30 <- p +
    annotate(
        "text",
        x = min(pred$Time) + (diff(range(pred$Time)) / 2),
        y = 190,
        label = paste0("AUC Difference: ", round(auc_diff))
    ) +
    annotate(
        "text",
        x = min(pred$Time) + (diff(range(pred$Time)) / 2),
        y = 180,
        label = paste0(
            "(95% CI: ",
            round(ci$bca[4]),
            ", ",
            round(ci$bca[5]),
            ")"
        )
    ) +
    geom_hline(yintercept = 140, linetype = "dashed")
```

```{r}
#| message: false
p_30
p_30_df <- p_30$data
p_30_df$Period <- "3 Months Prior to Progression"
```

### Post-Progression

- CGM data was limited to the CGM tracings at least 12 months away from last visit for non-progressors, and CGM tracings 3 months (90 days) after and at the time of development of T1D for progressors.
- For each participant, we calculated the average sensor value at each time of day during the various periods of the day.

```{r}
cgm_filtered <- cgm %>%
    filter(
        Group == "Non-Progressor" |
            (Group == "Progressor" & DaysFromEndpoint >= 0 & DaysFromEndpoint <= 90)
    )
cgm_filtered %>%
    group_by(ID) %>%
    mutate(
        nClinicVisits = length(unique(DOVISIT)),
        nCGMValues = length(SensorValue)
    ) %>%
    slice_min(row_number()) %>%
    ungroup() %>%
    select(
        nClinicVisits,
        nCGMValues,
        screen_FDR_GP,
        HLAGRP,
        sex,
        Race_Ethn2,
        Group
    ) %>%
    tbl_summary(Group) %>%
    add_overall() %>%
    add_p()
```

```{r}
#| include: false
d <- cgm_filtered %>%
    group_by(ID, Group, nTime) %>%
    summarise(SensorValue = mean(SensorValue, na.rm = T), .groups = "drop") %>%
    arrange(nTime) %>%
    pivot_wider(
        id_cols = c(ID, Group),
        names_from = nTime,
        values_from = SensorValue
    )
glucose <- d %>%
    select(-ID, -Group) %>%
    as.matrix()
d <- d %>%
    select(ID, Group) %>%
    as.data.frame()
d$Glucose <- glucose
d <- d[complete.cases(d), ]
# FoSR
fit_fosr <- bayes_fosr(Glucose ~ Group, data = d)
# Plot
pred <- data.frame(predict(fit_fosr))
colnames(pred) <- colnames(glucose)
pred$Group <- d$Group
pred <- pred %>%
    distinct() %>%
    pivot_longer(-Group, names_to = "Time", values_to = "Glucose")
pred$Time <- as.numeric(pred$Time)
p <- ggplot(pred, aes(x = Time, y = Glucose, group = Group, colour = Group)) +
    geom_line() +
    theme_classic() +
    ylim(c(90, 190)) +
    ylab("Sensor Glucose (mg/dL)") +
    xlab("Time of Day") +
    scale_color_manual(values = c("#66C2A5", "#FC8D62")) +
    theme(
        plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 45, vjust = 0.5)
    ) +
    scale_x_continuous(
        breaks = seq(0, 86400, by = 3600 * 2),
        labels = paste0(seq(0, 24, by = 2), ":00:00")
    )
# AUC
auc_prog <- trapz(
    pred$Time[pred$Group == "Progressor"] / 3600,
    pred$Glucose[pred$Group == "Progressor"]
)
auc_non_prog <- trapz(
    pred$Time[pred$Group == "Non-Progressor"] / 3600,
    pred$Glucose[pred$Group == "Non-Progressor"]
)
auc_diff <- auc_prog - auc_non_prog
# Create a function for bootstrapping
auc_diff_func <- function(d, indices) {
    fit_fosr <- bayes_fosr(Glucose ~ Group, d[indices, ])
    pred <- data.frame(predict(fit_fosr))
    colnames(pred) <- colnames(glucose)
    pred$Group <- d$Group
    pred <- pred %>%
        distinct() %>%
        pivot_longer(-Group, names_to = "Time", values_to = "Glucose")
    auc_prog <- trapz(
        as.numeric(pred$Time[pred$Group == "Progressor"]) / 3600,
        pred$Glucose[pred$Group == "Progressor"]
    )
    auc_non_prog <- trapz(
        as.numeric(pred$Time[pred$Group == "Non-Progressor"]) / 3600,
        pred$Glucose[pred$Group == "Non-Progressor"]
    )
    auc_diff <- auc_prog - auc_non_prog
    return(auc_diff)
}
# Toot it and boot it
reps <- boot(data = d, statistic = auc_diff_func, R = 200, strata = d$Group)
ci <- boot.ci(reps, type = "bca")
# Add to plot
p_0 <- p +
    annotate(
        "text",
        x = min(pred$Time) + (diff(range(pred$Time)) / 2),
        y = 190,
        label = paste0("AUC Difference: ", round(auc_diff))
    ) +
    annotate(
        "text",
        x = min(pred$Time) + (diff(range(pred$Time)) / 2),
        y = 180,
        label = paste0(
            "(95% CI: ",
            round(ci$bca[4]),
            ", ",
            round(ci$bca[5]),
            ")"
        )
    ) +
    geom_hline(yintercept = 140, linetype = "dashed")
```

```{r}
#| message: false
p_0
p_0_df <- p_0$data
p_0_df$Period <- "Post-Progression"
```

### Combined figure

```{r}
#| message: false
# P1
p_df <- do.call(rbind, list(p_69_df, p_36_df, p_30_df, p_0_df))
p_non_prog <- p_df %>% filter(Group == "Non-Progressor")
p_non_prog <- p_non_prog %>%
    group_by(Group, Time) %>%
    summarise(Glucose = mean(Glucose)) %>%
    mutate(Period = "12 Months Prior to Last Clinic Visit") %>%
    distinct()
p_prog <- p_df %>% filter(Group == "Progressor")
p_df <- rbind(p_prog, p_non_prog)
p <- ggplot(
    p_df,
    aes(
        x = Time,
        y = Glucose,
        group = interaction(Group, Period),
        colour = Group,
        linetype = Period
    )
) +
    geom_line() +
    theme_classic() +
    ylim(c(90, 190)) +
    ylab("Sensor Glucose (mg/dL)") +
    xlab("Time of Day") +
    geom_hline(yintercept = 140, linetype = "dashed") +
    scale_color_manual(values = c("#66C2A5", "#FC8D62")) +
    theme(
        plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 45, vjust = 0.5)
    ) +
    scale_x_continuous(
        breaks = seq(0, 86400, by = 3600 * 2),
        labels = paste0(seq(0, 24, by = 2), ":00:00")
    )
p
```
