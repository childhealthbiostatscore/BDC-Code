---
title: "JDRF Behavioral Intervention"
author: "Tim Vigers, Casey Sakamoto"
date: "today"
date-format: long
format:
  html:
    toc: true
    toc-depth: 5
    number-sections: true
    toc-float: true
    code-fold: true
    self-contained: true
    fig-height: 10
    fig-width: 10
    fig-cap-location: top
    page-layout: full
    theme:
      light: flatly
      dark: darkly
editor: 
  markdown: 
    wrap: 72
---

```{r libraries and import}
#| include: false
library(tidyverse)
library(plotly)
library(redcapAPI)
library(gtsummary)
library(lmerTest)
library(GLMMadaptive)
library(emmeans)
library(broom.mixed)
library(performance)
library(kableExtra)
unlockREDCap(c(rcon = "JDRF Behavioral Intervention"),
  keyring = "API_KEYs",
  envir = globalenv(),
  url = "https://redcap.ucdenver.edu/api/"
)
exportBulkRecords(list(db = rcon), envir = globalenv())
# Review invalid data
Records <- exportRecordsTyped(rcon)
reviewInvalidRecords(Records)

# api k:  0FB8B28FB5F4D22A98C5090488CE0BCB
```

api k:0FB8B28FB5F4D22A98C5090488CE0BCB

```{r data cleaning}
#| message: false
# Add treatment group to glycemic data
db_glycemic_data <- left_join(
  db_glycemic_data,
  db_randomization_form %>%
    filter(!is.na(treatment_group)) %>%
    select(record_id, treatment_group)
)
# Everyone else is considered "observe clinically"
db_glycemic_data$treatment_group <- as.character(db_glycemic_data$treatment_group)
db_glycemic_data$treatment_group[is.na(db_glycemic_data$treatment_group)] <-
  "Observe Clincically"
db_glycemic_data$treatment_group <- factor(db_glycemic_data$treatment_group,
  levels = c("Observe Clincically", "Behavioral Intervention", "Care+ (Control)")
)
# If they are missing gly_timepoint they don't have glycemic data at that visit
db_glycemic_data <- db_glycemic_data %>% filter(!is.na(gly_timepoint))
```

# Table 1

```{r}
#| label: tbl-1
#| tbl-cap: Participant Characteristics
#| # add in group
db_tgroups = db_glycemic_data %>% select(record_id, treatment_group) %>% unique()
db_demographics = left_join(db_demographics, db_tgroups)
#|
db_demographics %>%
  select(redcap_event_name, treatment_group,demo_hcl, demo_hcl_2, demo_age:demo_predict) %>%
  mutate(
    redcap_event_name = droplevels(redcap_event_name),
    demo_probability = as.numeric(demo_probability)
  ) %>%
  tbl_summary(
    by = treatment_group,
    missing_text = "Missing",
    type = list(
      demo_age ~ "continuous", demo_probability ~ "continuous"
    ),
    statistic = list(
      all_continuous() ~ "{mean} ({sd})")
  ) %>% add_overall() %>%
  as_kable_extra()
```

# Glycemic data

• Glycemic Data (Table 2) -- Needs some Pump data as well 
o We can drop HbA1c from the analysis as the observation period was too short to see a
change in HbA1c. I can just ignore it if you provide it, but there's no
reason to bother even analyzing it. 
o We need to add an analysis for Time in Automated Mode 
o We need to add number of boluses per day --
This is a BIG part of the hypothesis o The 5 glucose buckets should be
\<54 (Level 2 hypoglycemia), \<70 (Level 1 hypoglycemia; so just add
\<54 into 54-69), 70-180 (TIR), \>180 (Level 1 hyperglycemia; so just
add \>250 into 181-250), and \>250 (Level 2 hyperglycemia) 



## Groups by timepoint

```{r}
db_glycemic_data %>%
  group_by(gly_timepoint) %>%
  summarise(
    n = length(unique(record_id)),
    `n Observe Clincically` = sum(treatment_group == "Observe Clincically"),
    `n Behavioral Intervention` = sum(treatment_group == "Behavioral Intervention"),
    `n Care+ (Control)` = sum(treatment_group == "Care+ (Control)")
  ) %>%
  kable()
# # Write for checking
# write.csv(
#   db_glycemic_data %>%
#     select(
#       record_id, redcap_event_name, redcap_survey_identifier,
#       treatment_group, everything()
#     ),
#   file = "~/cleaned_glycemic_data.csv", row.names = F, na = ""
# )
```



• Model-Based
Analysis (Table 3)
o The main hypothesis we have for this project is how the intervention impacted bolusing behavior and how the bolusing behavior impacted TIR. I think we probably need a LMM looking at the
relationship between number of boluses per day on TIR between the BI and
Care+ groups.

o What I want to answer here is "Did the BI impact bolusing behavior and if so did that drive improvement in TIR?" I thinkLMM would be best for that, but I'm always happy to learn if there is a
better method. 

o As far as the model goes, I'm torn on controlling for
baseline HbA1c or baseline TIR. The goal of the project is to target
people with low TIR, so I'm worried that controlling for it will cancel
out what we're really trying to do. Also really happy to discuss this so
I can understand it better. 

• Survey Analysis (Table 4) 

o At baseline we
conducted the following surveys: Paid-PEDS, Inspire, Hypoglycemia Fear
Survey, Diabetes Technology Questionnaire. We need to see how the
baseline scores for each of these tools compared between the 3 groups. 

o In the intervention group we also gave an "Intervention" survey which
included questions about the sessions as well as Diabetes Centered
Family Conflict questions. I'd like to look at each question for this
one in addition to composite scores

## HbA1c

### Plot

```{r}
v <- "gly_a1c"
df <- db_glycemic_data %>%
  select(record_id, gly_timepoint, treatment_group, all_of(v)) %>%
  drop_na()
p <- ggplot(df, aes(
  x = gly_timepoint, y = !!sym(v), group = record_id, color = treatment_group
)) +
  geom_point() +
  geom_line() +
  theme_bw() +
  theme(axis.title.x = element_blank())
ggplotly(p)
```

### Model

```{r}
#| message: false
f <- as.formula(paste0(v, "~gly_timepoint*treatment_group+(1|record_id)"))
mod <- lmer(f, data = db_glycemic_data)
```

#### Results

```{r}
kable(tidy(mod, effects = "fixed"), digits = 3)
```

#### Means

```{r}
kable(data.frame(emmeans(mod, ~ gly_timepoint * treatment_group)), digits = 3)
```

## Sensor wear

### Plot

```{r}
v <- "gly_sensorwear"
df <- db_glycemic_data %>%
  select(record_id, gly_timepoint, treatment_group, all_of(v)) %>%
  drop_na()
p <- ggplot(df, aes(
  x = gly_timepoint, y = !!sym(v), group = record_id, color = treatment_group
)) +
  geom_point() +
  geom_line() +
  theme_bw() +
  theme(axis.title.x = element_blank())
ggplotly(p)
```

### Model

```{r}
f <- as.formula(paste0(v, "~gly_timepoint*treatment_group+(1|record_id)"))
mod <- lmer(f, data = db_glycemic_data)
```

#### Results

```{r}
kable(tidy(mod, effects = "fixed"), digits = 3)
```

#### Means

```{r}
kable(data.frame(emmeans(mod, ~ gly_timepoint * treatment_group)), digits = 3)
```

## Sensor under 54

### Plot

```{r}
v <- "gly_sensor_u54"
df <- db_glycemic_data %>%
  select(record_id, gly_timepoint, treatment_group, all_of(v)) %>%
  drop_na()
p <- ggplot(df, aes(
  x = gly_timepoint, y = !!sym(v), group = record_id, color = treatment_group
)) +
  geom_point() +
  geom_line() +
  theme_bw() +
  theme(axis.title.x = element_blank())
ggplotly(p)
```

### Model

Because the majority of people did not have any time under 54 mg/dL, we
used a hurdle model in which the first part of the model is the
probability of a zero value and the second part is the probability of
the non-zero values.

```{r}
f <- as.formula(paste0(v, " ~ gly_timepoint*treatment_group"))
mod <- mixed_model(f,
  random = ~ 1 | record_id, data = df,
  family = hurdle.lognormal(), n_phis = 1, zi_fixed = ~1
)
```

#### Results

```{r}
kable(tidy(mod), digits = 3)
```

#### Means

These model means do not really make sense since we can't have negative
values for this outcome, so this model likely needs additional work.

```{r}
kable(data.frame(emmeans(mod, ~ gly_timepoint * treatment_group)), digits = 3)
```

## Sensor 54 - 69

### Plot

```{r}
v <- "gly_sensor_54_69"
df <- db_glycemic_data %>%
  select(record_id, gly_timepoint, treatment_group, all_of(v)) %>%
  drop_na()
p <- ggplot(df, aes(
  x = gly_timepoint, y = !!sym(v), group = record_id, color = treatment_group
)) +
  geom_point() +
  geom_line() +
  theme_bw() +
  theme(axis.title.x = element_blank())
ggplotly(p)
```

### Model

Because the majority of people did not have any time in the range 54 -
69 mg/dL, we used a hurdle model in which the first part of the model is
the probability of a zero value and the second part is the probability
of the non-zero values.

```{r}
f <- as.formula(paste0(v, " ~ gly_timepoint*treatment_group"))
mod <- mixed_model(f,
  random = ~ 1 | record_id, data = df,
  family = hurdle.lognormal(), n_phis = 1, zi_fixed = ~1
)
```

#### Results

```{r}
kable(tidy(mod), digits = 3)
```

#### Means

```{r}
kable(data.frame(emmeans(mod, ~ gly_timepoint * treatment_group)), digits = 3)
```

## Sensor 70 - 180

### Plot

```{r}
v <- "gly_sensor_70_180"
df <- db_glycemic_data %>%
  select(record_id, gly_timepoint, treatment_group, all_of(v)) %>%
  drop_na()
p <- ggplot(df, aes(
  x = gly_timepoint, y = !!sym(v), group = record_id, color = treatment_group
)) +
  geom_point() +
  geom_line() +
  theme_bw() +
  theme(axis.title.x = element_blank())
ggplotly(p)
```

### Model

```{r}
f <- as.formula(paste0(v, "~gly_timepoint*treatment_group+(1|record_id)"))
mod <- lmer(f, data = db_glycemic_data)
```

#### Results

```{r}
kable(tidy(mod, effects = "fixed"), digits = 3)
```

#### Means

```{r}
kable(data.frame(emmeans(mod, ~ gly_timepoint * treatment_group)), digits = 3)
```

## Sensor 181 - 250

### Plot

```{r}
v <- "gly_sensor_181_250"
df <- db_glycemic_data %>%
  select(record_id, gly_timepoint, treatment_group, all_of(v)) %>%
  drop_na()
p <- ggplot(df, aes(
  x = gly_timepoint, y = !!sym(v), group = record_id, color = treatment_group
)) +
  geom_point() +
  geom_line() +
  theme_bw() +
  theme(axis.title.x = element_blank())
ggplotly(p)
```

### Model

```{r}
f <- as.formula(paste0(v, "~gly_timepoint*treatment_group+(1|record_id)"))
mod <- lmer(f, data = db_glycemic_data)
```

#### Results

```{r}
kable(tidy(mod, effects = "fixed"), digits = 3)
```

#### Means

```{r}
kable(data.frame(emmeans(mod, ~ gly_timepoint * treatment_group)), digits = 3)
```

## Sensor \> 250

### Plot

```{r}
v <- "gly_sensor_g250"
df <- db_glycemic_data %>%
  select(record_id, gly_timepoint, treatment_group, all_of(v)) %>%
  drop_na()
p <- ggplot(df, aes(
  x = gly_timepoint, y = !!sym(v), group = record_id, color = treatment_group
)) +
  geom_point() +
  geom_line() +
  theme_bw() +
  theme(axis.title.x = element_blank())
ggplotly(p)
```

### Model

```{r}
f <- as.formula(paste0(v, "~gly_timepoint*treatment_group+(1|record_id)"))
mod <- lmer(f, data = db_glycemic_data)
```

#### Results

```{r}
kable(tidy(mod, effects = "fixed"), digits = 3)
```

#### Means

```{r}
kable(data.frame(emmeans(mod, ~ gly_timepoint * treatment_group)), digits = 3)
```

## Mean sensor

### Plot

```{r}
v <- "gly_sensor_mean"
df <- db_glycemic_data %>%
  select(record_id, gly_timepoint, treatment_group, all_of(v)) %>%
  drop_na()
p <- ggplot(df, aes(
  x = gly_timepoint, y = !!sym(v), group = record_id, color = treatment_group
)) +
  geom_point() +
  geom_line() +
  theme_bw() +
  theme(axis.title.x = element_blank())
ggplotly(p)
```

### Model

```{r}
f <- as.formula(paste0(v, "~gly_timepoint*treatment_group+(1|record_id)"))
mod <- lmer(f, data = db_glycemic_data)
```

#### Results

```{r}
kable(tidy(mod, effects = "fixed"), digits = 3)
```

#### Means

```{r}
kable(data.frame(emmeans(mod, ~ gly_timepoint * treatment_group)), digits = 3)
```

## Sensor SD

### Plot

```{r}
v <- "gly_sensor_sd"
df <- db_glycemic_data %>%
  select(record_id, gly_timepoint, treatment_group, all_of(v)) %>%
  drop_na()
p <- ggplot(df, aes(
  x = gly_timepoint, y = !!sym(v), group = record_id, color = treatment_group
)) +
  geom_point() +
  geom_line() +
  theme_bw() +
  theme(axis.title.x = element_blank())
ggplotly(p)
```

### Model

```{r}
f <- as.formula(paste0(v, "~gly_timepoint*treatment_group+(1|record_id)"))
mod <- lmer(f, data = db_glycemic_data)
```

#### Results

```{r}
kable(tidy(mod, effects = "fixed"), digits = 3)
```

#### Means

```{r}
kable(data.frame(emmeans(mod, ~ gly_timepoint | treatment_group)), digits = 3)
```
