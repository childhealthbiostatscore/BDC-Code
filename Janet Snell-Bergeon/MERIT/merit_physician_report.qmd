---
title: "MERIT Participant Reports"
author: "Tim Vigers"
date: "today"
date-format: long
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
    theme:
      light: flatly
      dark: darkly
bibliography: /Users/timvigers/Dropbox/Miscellaneous/zotero.bib
csl: /Users/timvigers/Dropbox/GitHub/styles/american-medical-association.csl
editor: source
---

```{r setup}
#| include: false
library(tidyverse)
library(lubridate)
library(hms)
library(gt)
knitr::opts_knit$set(root.dir = "/Users/timvigers/Library/CloudStorage/OneDrive-TheUniversityofColoradoDenver/Vigers/BDC/Janet Snell-Bergeon/MERIT")
```

```{r data cleaning}
load("./Data_Clean/analysis_data.RData")
# cgm <- cgm %>% filter(participant_id == "101_EX")
```

```{r functions}
# Phase plot for a single participant - assumes specific column names for now
merit_phase_plot <- function(df = cgm, phase = "menstrual_phase") {
  # Get start and end times
  if (phase == "menstrual_phase") {
    phases <- df %>%
      group_by(study_phase, menstrual_phase) %>%
      summarise(
        start = first(timestamp, na_rm = T),
        end = last(timestamp, na_rm = T),
        .groups = "drop"
      )
    p <- df %>%
      ggplot(aes(x = timestamp, y = sensorglucose)) +
      geom_rect(
        data = phases, aes(
          xmin = start, xmax = end, ymin = -Inf, ymax = Inf,
          fill = menstrual_phase
        ),
        alpha = 0.2, inherit.aes = F
      ) +
      geom_point(shape = ".") +
      scale_fill_discrete(name = "Menstrual Phase")
  } else if (phase == "study_phase") {
    phases <- df %>%
      group_by(study_phase) %>%
      summarise(
        start = first(timestamp, na_rm = T),
        end = last(timestamp, na_rm = T),
        .groups = "drop"
      )
    p <- df %>%
      ggplot(aes(x = timestamp, y = sensorglucose)) +
      geom_rect(
        data = phases, aes(
          xmin = start, xmax = end, ymin = -Inf, ymax = Inf,
          fill = study_phase
        ),
        alpha = 0.2, inherit.aes = F
      ) +
      geom_point(shape = ".") +
      scale_fill_discrete(name = "Study Phase")
  }
  # Plot formatting
  p <- p +
    ylim(c(35, 405)) +
    xlab("Time") +
    ylab("Sensor Glucose (mg/dL)") +
    theme_bw()
  return(p)
}
mean_glucose_plot <- function(df = cgm) {
  p <- df %>%
    mutate(Time = as_hms(round_date(timestamp, "5 minutes"))) %>%
    group_by(menstrual_phase, Time) %>%
    summarise(sensorglucose = mean(sensorglucose), .groups = "drop") %>%
    ggplot(aes(x = Time, y = sensorglucose, color = menstrual_phase)) +
    geom_point(shape = ".") +
    geom_line() +
    scale_color_discrete(name = "Menstrual Phase") +
    xlab("Time") +
    ylab("Mean Sensor Glucose (mg/dL)") +
    theme_bw()
  return(p)
}
sd_glucose_plot <- function(df = cgm) {
  p <- df %>%
    mutate(Time = as_hms(round_date(timestamp, "5 minutes"))) %>%
    group_by(menstrual_phase, Time) %>%
    summarise(sensorglucose = sd(sensorglucose), .groups = "drop") %>%
    ggplot(aes(x = Time, y = sensorglucose, color = menstrual_phase)) +
    geom_point(shape = ".") +
    geom_line() +
    scale_color_discrete(name = "Menstrual Phase") +
    xlab("Time") +
    ylab("Sensor Glucose SD (mg/dL)") +
    theme_bw()
  return(p)
}
tir_plot <- function(df = cgm, range = c(70, 180)) {
  p <- df %>%
    mutate(Time = as_hms(round_date(timestamp, "5 minutes"))) %>%
    group_by(menstrual_phase, Time) %>%
    summarise(
      sensorglucose =
        mean(sensorglucose >= range[1] & sensorglucose <= range[2]) * 100,
      .groups = "drop"
    ) %>%
    ggplot(aes(x = Time, y = sensorglucose, color = menstrual_phase)) +
    geom_point(shape = ".") +
    geom_line() +
    scale_color_discrete(name = "Menstrual Phase") +
    xlab("Time") +
    theme_bw()
  if (is.infinite(range[1])) {
    p <- p +
      ylab(paste0("% of Values < ", range[2]))
  } else if (is.infinite(range[2])) {
    p <- p +
      ylab(paste0("% of Values > ", range[1]))
  } else {
    p <- p +
      ylab(paste0("% of Values in Range (", range[1], " - ", range[2], ")"))
  }
  return(p)
}
```

```{r results='asis'}
invisible(lapply(unique(cgm$participant_id), function(id) {
  df <- cgm %>% filter(participant_id == id)
  cat("\n")
  cat("\n")
  cat("#", id)
  cat("\n")
  cat("\n")
  cat("## Tables")
  cat("\n")
  cat("\n")
  cat("### CGM Metrics by Phase (Overall)")
  cat("\n")
  cat("\n")
  df %>%
    group_by(menstrual_phase) %>%
    summarise(
      `Mean glucose` = mean(sensorglucose),
      `TIR (70-180)` =
        scales::percent(mean(sensorglucose >= 70 & sensorglucose <= 180),
          accuracy = 0.01
        ),
      `TBR (< 70)` = scales::percent(mean(sensorglucose < 70), accuracy = 0.01),
      `TBR (< 54)` = scales::percent(mean(sensorglucose < 54), accuracy = 0.01),
      `TAR (> 180)` = scales::percent(mean(sensorglucose > 180),
        accuracy = 0.01
      ),
      `TAR (> 200)` = scales::percent(mean(sensorglucose > 200),
        accuracy = 0.01
      ),
      `Glucose SD` = sd(sensorglucose)
    ) %>%
    gt() %>%
    cols_label(menstrual_phase = "Menstrual Phase") %>%
    print()
  cat("\n")
  cat("\n")
  cat("### CGM Metrics by Phase and Time of Day")
  cat("\n")
  cat("\n")
  df %>%
    group_by(time_of_day, menstrual_phase) %>%
    summarise(
      `Mean glucose` = mean(sensorglucose),
      `TIR (70-180)` =
        scales::percent(mean(sensorglucose >= 70 & sensorglucose <= 180),
          accuracy = 0.01
        ),
      `TBR (< 70)` = scales::percent(mean(sensorglucose < 70), accuracy = 0.01),
      `TBR (< 54)` = scales::percent(mean(sensorglucose < 54), accuracy = 0.01),
      `TAR (> 180)` = scales::percent(mean(sensorglucose > 180),
        accuracy = 0.01
      ),
      `TAR (> 200)` = scales::percent(mean(sensorglucose > 200),
        accuracy = 0.01
      ),
      `Glucose SD` = sd(sensorglucose),
      .groups = "drop"
    ) %>%
    gt() %>%
    cols_label(
      time_of_day ~ "Time of Day",
      menstrual_phase = "Menstrual Phase"
    ) %>%
    print()
  cat("\n")
  cat("\n")
  cat("## Graphs")
  cat("\n")
  cat("\n")
  cat("### All Glucose Values by Menstrual Phase")
  cat("\n")
  cat("\n")
  merit_phase_plot(df, phase = "menstrual_phase") %>% print()
  cat("\n")
  cat("\n")
  cat("### All Glucose Values by Study Phase")
  cat("\n")
  cat("\n")
  merit_phase_plot(df, phase = "study_phase") %>% print()
  cat("\n")
  cat("\n")
  cat("### Mean Glucose Values by Menstrual Phase")
  cat("\n")
  cat("\n")
  mean_glucose_plot(df) %>% print()
  cat("\n")
  cat("\n")
  cat("### Glucose SD by Menstrual Phase")
  cat("\n")
  cat("\n")
  sd_glucose_plot(df) %>% print()
  cat("\n")
  cat("\n")
  cat("### TIR by Menstrual Phase")
  cat("\n")
  cat("\n")
  tir_plot(df) %>% print()
  cat("\n")
  cat("\n")
  tir_plot(df, c(-Inf, 70)) %>% print()
  cat("\n")
  cat("\n")
  tir_plot(df, c(-Inf, 54)) %>% print()
  cat("\n")
  cat("\n")
  tir_plot(df, c(180, Inf)) %>% print()
  cat("\n")
  cat("\n")
  tir_plot(df, c(200, Inf)) %>% print()
  cat("\n")
  cat("\n")
}))
```
